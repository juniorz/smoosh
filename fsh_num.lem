open import Pervasives_extra

(*--------------------------------*)
(* Nat class                      *)
(*--------------------------------*)
class ( Nat 'a )
  val fromNat : nat -> 'a
  val toNat : 'a -> nat
end

instance (Nat integer)
  let fromNat = integerFromNat
  let toNat = natFromInteger
end

instance (Nat int32)
  let fromNat = int32FromNat
  let toNat = natFromInt32
end

instance (Nat int64)
  let fromNat = int64FromNat
  let toNat = natFromInt64
end

(*--------------------------------*)
(* Read class                     *)
(*--------------------------------*)

let is_whitespace c = elem c (toCharList " \n\t")
let is_digit c = elem c (toCharList "1234567890")
let is_num_const_char c = elem c (toCharList "1234567890xabcdefABCDEF")
let is_alpha c = elem c (toCharList "abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")

(* Convert uppercase A-F to lowercase and then convert
 * lowercase hexdigit to integer 10 to 15. *)
val hexalpha_to_num : char -> nat
let hexalpha_to_num c =
  let num = ord c in
  if 48 <= num && num <= 57
  then num - 48
  else let lowercase = if num >= 65 && num <= 70
                       then num + 32
                       else num in
       9 + (lowercase - 96)

class ( Read 'a )
  (* Read can fail with an error message by using Left.
   * Do not use any methods that may throw errors. *)
  val read : list char -> either string 'a
  val write : 'a -> string
end

let readConstant dec hex oct acc chars =
  match chars with
  | #'0'::#'x'::cs -> hex acc cs
  | #'0'::cs -> oct acc cs
  | _ -> dec acc chars
  end

let int64Max = ((int64FromNat 2) ** 63) - 1
let int64Min = ~((int64FromNat 2) ** 63)

let int32Max = ((int32FromNat 2) ** 31) - 1
let int32Min = ~((int32FromNat 2) ** 31)

val readInteger : nat -> integer -> (list char) -> either string integer
let rec readInteger base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else readInteger base (((integerFromNat base) * acc) + (integerFromNat num)) cs
  end

val readInt64 : nat -> int64 -> (list char) -> either string int64
let rec readInt64 base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else let acc1 = ((int64FromNat base) * acc) + (int64FromNat num) in
           if acc1 < 0
           then Right int64Max
           else readInt64 base acc1 cs
  end

val readInt32 : nat -> int32 -> (list char) -> either string int32
let rec readInt32 base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else let acc1 = ((int32FromNat base) * acc) + (int32FromNat num) in
           if acc1 < 0
           then Right int32Max
           else readInt32 base acc1 cs
  end


val write_helper : forall 'a. Eq 'a, Nat 'a, NumIntegerDivision 'a, NumRemainder 'a => string -> 'a -> string
let rec write_helper str n =
  if n = fromNat 0
  then str
  else let ten = fromNat 10 in
    let next_digit = n mod ten in
    write_helper ((stringFromNat (toNat next_digit)) ^ str) (n div ten)

val unbounded_write : forall 'a. Eq 'a, Ord 'a, Nat 'a, NumNegate 'a, NumIntegerDivision 'a, NumRemainder 'a => 'a -> string
let unbounded_write n =
  if n < fromNat 0
  then "-" ^ (write_helper "" (~n))
  else 
    if n = fromNat 0
    then "0"
    else write_helper "" n

val write32 : int32 -> string
val write64 : int64 -> string
declare ocaml target_rep function write32 = `Int32.to_string`
declare ocaml target_rep function write64 = `Int64.to_string`

instance ( Read integer )
  let read cs = readConstant (readInteger 10) (readInteger 16) (readInteger 8) 0 cs
  let write = unbounded_write
end

instance ( Read int64 )
  let read cs = readConstant (readInt64 10) (readInt64 16) (readInt64 8) (int64FromNat 0) cs
  let write = write64
end

instance ( Read int32 )
  let read cs = readConstant (readInt32 10) (readInt32 16) (readInt32 8) (int32FromNat 0) cs
  let write = write32
end
