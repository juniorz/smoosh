open import Fsh

open import Path
open import Pattern
open import Expansion

val eval_step : ty_os_state -> stmt -> 
                either (evaluation_step * ty_os_state) (* error case *)
                       (evaluation_step * ty_os_state * stmt) (* success *)
let rec eval_step s0 stmt =
  match stmt with
  | Command _assigns _ws _redirs -> Left (XSSimple "TODO", s0)
  | Pipe _bg _stmts -> Left (XSPipe "TODO", s0)
  | Redir _stmt' _redirs -> Left (XSRedir "TODO", s0)
  | Background _stmt' _redirs -> Left (XSBackground "TODO", s0)
  | Subshell _stmt' _redirs -> Left (XSSubshell "TODO", s0)
  | And _l _r -> Left (XSAnd "TODO", s0)
  | Or _l _r -> Left (XSOr "TODO", s0)
  | Not _stmt' -> Left (XSNot "TODO", s0)
  | Semi _l _r -> Left (XSSemi "TODO", s0)
  | If _c _t _e -> Left (XSIf "TODO", s0)
  | While _cond _body -> Left (XSWhile "TODO", s0)
  | For _var _ws _body -> Left (XSFor "TODO", s0)
  | Case _ws _cases -> Left (XSCase "TODO", s0)
  | Defun _name _body -> Left (XSDefun "TODO", s0)
  end
