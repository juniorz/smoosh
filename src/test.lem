open import Smoosh

(* TODO dash supports other flags:
   -O, -G (owner/group tests)
 *)

type test_expr =
    (* UNARY; encoding -n (nonempy string) *)
    TestBlock of path                (* -b *)
  | TestCharacter of path            (* -c *)
  | TestDirectory of path            (* -d *)
  | TestExists of path               (* -e *)
  | TestFile of path                 (* -f *)
  | TestSetgid of path               (* -g *)
  | TestSymlink of path              (* -h, -L *)
  | TestSticky of path               (* -k [extension, from dash] *)
  | TestFifo of path                 (* -p *)
  | TestReadable of path             (* -r *)
  | TestSocket of path               (* -S *)
  | TestNonempty_file of path        (* -s *)
  | TestTerminalFD of fd             (* -t *)
  | TestSetuid of path               (* -u *)
  | TestWriteable of path            (* -w *)
  | TestExecutable of path           (* -x *)
  | TestEmpty_str of string          (* -z *)
    (* BINARY; we encode negated forms, ge, lt, and le *)
  | TestEq_str of string * string    (* = [ along w/ !=, extension ] *)
  | TestGt_str of string * string    (* > [extension, from dash] *)
  | TestEq_num of integer * integer  (* -eq *)
  | TestGt_num of integer * integer  (* -gt *)
    (* NON-STANDARD BINARY *)
  | TestNewerFile of string * string (* -nt *)
  | TestOlderFile of string * string (* -ot *)
  | TestSameFile of string * string  (* -ef *)
    (* TRICKSY *)
  | TestAnd of test_expr * test_expr (* -a *)
  | TestOr of test_expr * test_expr  (* -o *)
  | TestNot of test_expr             (* ! *)

val string_of_test_expr : test_expr -> string
let rec string_of_test_expr expr = string_of_test_expr_disjunction expr
and string_of_test_expr_disjunction expr =
  match expr with
  | TestOr lhs rhs -> string_of_test_expr_conjunction lhs ^ " -o " ^ string_of_test_expr_disjunction rhs
  | _ -> string_of_test_expr_conjunction expr
  end
and string_of_test_expr_conjunction expr =
  match expr with
  | TestAnd lhs rhs -> string_of_test_expr_negation lhs ^ " -a " ^ string_of_test_expr_conjunction rhs
  | _ -> string_of_test_expr_negation expr
  end
and string_of_test_expr_negation expr =
  match expr with
  | TestNot (TestEq_str str1 str2) -> str1 ^ " != " ^ str2
  | TestNot (TestEq_num n1 n2) -> write n1 ^ " -ne " ^ write n2
  | TestNot (TestGt_num n1 n2) -> write n2 ^ " -le " ^ write n1
  | TestNot (TestEmpty_str str) -> "-n " ^ str
  | TestNot expr -> "! " ^ string_of_test_expr_equality expr
  | _ -> string_of_test_expr_equality expr
  end
and string_of_test_expr_equality expr =
  match expr with
  | TestEq_str    str1 str2 -> str1 ^ " = " ^ str2
  | TestGt_str    str1 str2 -> str1 ^ " \\> " ^ str2
  | TestNewerFile str1 str2 -> str1 ^ " -nt " ^ str2
  | TestOlderFile str1 str2 -> str1 ^ " -ot " ^ str2
  | TestSameFile        str1 str2 -> str1 ^ " -ef " ^ str2
  | TestEq_num    n1   n2   -> write n1 ^ " -eq " ^ write n2
  | TestGt_num    n1   n2   -> write n1 ^ " -gt " ^ write n2
  | _ -> string_of_test_expr_unary expr
  end
and string_of_test_expr_unary expr =
  match expr with
  | TestBlock path         -> "-b " ^ path
  | TestCharacter path     -> "-c " ^ path
  | TestDirectory path     -> "-d " ^ path
  | TestExists path        -> "-e " ^ path
  | TestFile path          -> "-f " ^ path
  | TestSetgid path        -> "-g " ^ path
  | TestSymlink path       -> "-L " ^ path
  | TestSticky path        -> "-k " ^ path
  | TestFifo path          -> "-p " ^ path
  | TestReadable path      -> "-r " ^ path
  | TestSocket path        -> "-S " ^ path
  | TestNonempty_file path -> "-s " ^ path
  | TestTerminalFD fd      -> "-t " ^ stringFromNat fd
  | TestSetuid path        -> "-u " ^ path
  | TestWriteable path     -> "-w " ^ path
  | TestExecutable path    -> "-x " ^ path
  | TestEmpty_str str      -> "-z " ^ str
  | expr -> "\\(" ^ string_of_test_expr_disjunction expr ^ "\\)"
  end

val parse_test_expr_disjunction : list string -> either string (test_expr * list string)
val parse_test_expr_conjunction : list string -> either string (test_expr * list string)
val parse_test_expr_negation : list string -> either string (test_expr * list string)
val parse_test_expr_equality : list string -> either string (test_expr * list string)
val parse_test_expr_unary : list string -> either string (test_expr * list string)

let read_two_nats num1 num2 op =
  match (readSignedInteger 10 (toCharList num1), 
         readSignedInteger 10 (toCharList num2)) with
  | (Right n1, Right n2) -> Right (n1, n2)
  | (Left msg, _) -> Left ("expected number before " ^ op ^ ", found '" ^ num1 ^ "' (" ^ msg ^ ")")
  | (_, Left msg) -> Left ("expected number after " ^ op ^ ", found '" ^ num2 ^ "' (" ^ msg ^ ")")
  end

let rec parse_test_expr_disjunction toks = 
  match parse_test_expr_conjunction toks with
  | Left msg -> Left msg
  | Right (lhs,"-o"::toks') ->
     match parse_test_expr_disjunction toks' with
     | Left msg -> Left msg
     | Right (rhs, toks'') -> Right (TestOr lhs rhs, toks'')
     end
  | Right (expr,toks') -> Right (expr, toks')
  end        
and parse_test_expr_conjunction toks = 
  match parse_test_expr_negation toks with
  | Left msg -> Left msg
  | Right (lhs,"-a"::toks') ->
     match parse_test_expr_conjunction toks' with
     | Left msg -> Left msg
     | Right (rhs, toks'') -> Right (TestAnd lhs rhs, toks'')
     end
  | Right (expr,toks') -> Right (expr, toks')
  end        
and parse_test_expr_negation toks = 
  match toks with
  | "!"::toks' ->
     match parse_test_expr_equality toks' with
     | Left msg -> Left msg
     | Right (expr, toks'') -> Right (TestNot expr, toks'')
     end
  | _ -> parse_test_expr_equality toks
  end
and parse_test_expr_equality toks = 
  match toks with
  | str1::"="::str2::toks' -> Right (TestEq_str str1 str2, toks')
  | str1::"!="::str2::toks' -> Right (TestNot (TestEq_str str1 str2), toks')
  | str1::">"::str2::toks' -> Right (TestGt_str str1 str2, toks')
  | str1::"<"::str2::toks' -> Right (TestGt_str str2 str1, toks')
  | str1::"-nt"::str2::toks' -> Right (TestNewerFile str1 str2, toks')
  | str1::"-ot"::str2::toks' -> Right (TestOlderFile str1 str2, toks')
  | str1::"-ef"::str2::toks' -> Right (TestSameFile str1 str2, toks')
  | num1::op::num2::toks' -> 
     if not (elem op ["-eq";"-ne";"-gt";"-ge";"-lt";"-le"])
     then parse_test_expr_unary toks
     else
       match read_two_nats num1 num2 op with
       | Left msg -> Left msg
       | Right (n1,n2) ->
          match op with
          | "-eq"  -> Right (TestEq_num n1 n2, toks')
          | "-ne"  -> Right (TestNot (TestEq_num n1 n2), toks')
          | "-gt"  -> Right (TestGt_num n1 n2, toks')
          | "-ge"  -> Right (TestNot (TestGt_num n2 n1), toks')
          | "-lt"  -> Right (TestGt_num n2 n1, toks')
          | "-le"  -> Right (TestNot (TestGt_num n1 n2), toks')
          | _      -> Assert_extra.failwith ("parse_test_expr_equality: unexpected operation " ^ op)
          end
       end
   | _ -> parse_test_expr_unary toks
  end
and parse_test_expr_unary toks =
  match toks with
  | "-b"::path::toks' -> Right (TestBlock path,toks')
  | "-c"::path::toks' -> Right (TestCharacter path, toks')
  | "-d"::path::toks' -> Right (TestDirectory path, toks')
  | "-e"::path::toks' -> Right (TestExists path, toks')
  | "-f"::path::toks' -> Right (TestFile path, toks')
  | "-g"::path::toks' -> Right (TestSetgid path, toks')
  | "-h"::path::toks' -> Right (TestSymlink path, toks')
  | "-L"::path::toks' -> Right (TestSymlink path, toks')
  | "-k"::path::toks' -> Right (TestSticky path, toks')
  | "-n"::str::toks'  -> Right (TestNot (TestEmpty_str str), toks')
  | "-p"::path::toks' -> Right (TestFifo path, toks')
  | "-r"::path::toks' -> Right (TestReadable path, toks')
  | "-S"::path::toks' -> Right (TestSocket path, toks')
  | "-s"::path::toks' -> Right (TestNonempty_file path, toks')
  | "-t"::fd_s::toks' -> 
     match readNat (toCharList fd_s) with
     | Left msg -> Left ("expected fd number after -t, found '" ^ fd_s ^ "' (" ^ msg ^ ")")
     | Right fd -> Right (TestTerminalFD fd, toks')
     end
  | "-u"::path::toks' -> Right (TestSetuid path, toks')
  | "-w"::path::toks' -> Right (TestWriteable path, toks')
  | "-x"::path::toks' -> Right (TestExecutable path, toks')
  | "-z"::str::toks'  -> Right (TestEmpty_str str, toks')
  | "("::toks' -> 
     match parse_test_expr_disjunction toks' with
     | Left msg -> Left msg
     | Right (expr,")"::toks'') -> Right (expr,toks'')
     | Right (expr,tok::_) -> Left ("expected ')' after " ^ string_of_test_expr expr ^ ", found '" ^ tok ^ "'")
     | Right (expr,[]) -> Left ("expected ')' after " ^ string_of_test_expr expr ^ ", found end of input")
     end
  (* plain strings are tested for non-nullness *)
  | str::toks' -> Right (TestNot (TestEmpty_str str),toks')
  | [] -> Left "expected unary operator, found end of input"
  end

val parse_test_expr : list string -> either string test_expr
let parse_test_expr toks = 
  match parse_test_expr_disjunction toks with
  | Left err -> Left ("parse error in '" ^ concat " " toks ^ "': " ^ err)
  | Right (expr,[]) -> Right expr
  | Right (expr,toks) -> Left ("unexpected input after " ^ string_of_test_expr expr ^ ": " ^ concat " " toks)
  end

val eval_test_expr 
    : forall 'a. OS 'a => os_state 'a -> test_expr -> bool
let rec eval_test_expr s0 expr = 
  match expr with
  | TestBlock path         -> file_type_follow s0 path = Just FileBlock     
  | TestCharacter path     -> file_type_follow s0 path = Just FileCharacter
  | TestDirectory path     -> file_type_follow s0 path = Just FileDirectory
  | TestExists path        -> file_exists s0 path
  | TestFile path          -> file_type_follow s0 path = Just FileRegular
  | TestSetgid path        -> 
     match file_perms s0 path with
     | Nothing -> false
     | Just perms -> perms.setgid
     end
  | TestSymlink path       -> file_type s0 path = Just FileLink
  | TestSticky path        -> 
     match file_perms s0 path with
     | Nothing -> false
     | Just perms -> perms.sticky
     end
  | TestFifo path          -> file_type_follow s0 path = Just FileFIFO
  | TestReadable path      -> is_readable s0 path
  | TestSocket path        -> file_type_follow s0 path = Just FileSocket
  | TestNonempty_file path -> 
     match file_size s0 path with
     | Nothing -> false
     | Just 0 -> false
     | Just _ -> true
     end
  | TestTerminalFD fd      -> is_tty s0 fd
  | TestSetuid  path       -> 
     match file_perms s0 path with
     | Nothing -> false
     | Just perms -> perms.setuid
     end
  | TestWriteable path     -> is_writeable s0 path
  | TestExecutable path    -> is_executable s0 path
  | TestEmpty_str str      -> str = ""
  | TestEq_str str1 str2   -> str1 = str2
  | TestGt_str str1 str2   -> str1 > str2 (* TODO use locale *)
  | TestEq_num n1 n2       -> n1 = n2 
  | TestGt_num n1 n2       -> n1 > n2
  | TestNewerFile f1 f2    -> 
     match (file_mtime s0 f1, file_mtime s0 f2) with
     | (Nothing, _) -> false
     | (Just _, Nothing) -> true
     | (Just time1, Just time2) -> time1 > time2
     end
  | TestOlderFile f1 f2    -> 
     match (file_mtime s0 f1, file_mtime s0 f2) with
     | (Nothing, Nothing) -> false
     | (Nothing, Just _) -> true
     | (Just _, Nothing) -> false
     | (Just time1, Just time2) -> time1 < time2
     end
  | TestSameFile f1 f2     ->
     match (file_number s0 f1, file_number s0 f2) with
     | (Nothing, _) -> false
     | (_, Nothing) -> false
     | (Just (dev1, ino1), Just (dev2, ino2)) -> dev1 = dev2 && ino1 = ino2
     end
  | TestAnd expr1 expr2    -> eval_test_expr s0 expr1 && eval_test_expr s0 expr2
  | TestOr expr1 expr2     -> eval_test_expr s0 expr1 || eval_test_expr s0 expr2
  | TestNot expr'          -> not (eval_test_expr s0 expr')
  end
