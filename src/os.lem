open import Smoosh_prelude
include import Signal_platform
import Debug
                                   
(**********************************************************************)
(* OS STATE ***********************************************************)
(**********************************************************************)

type log_entry =
    LogMessage of string
  | LogConcretization of symbolic_string
  | LogUnspecified of string
  | LogUndefined of string
  | LogStep of evaluation_step

type os_state 'a = <| 
   symbolic: 'a; 
   sh: shell_state;
   log: list log_entry;
   fuel: maybe nat;
 |>                   

type step_result 'a =
  either (evaluation_step * os_state 'a) (evaluation_step * os_state 'a * stmt)

type step_fun 'a = 
  os_state 'a -> 
  bool (* exit status checked elsewhere? *) ->
  stmt -> 
  step_result 'a

(**********************************************************************)
(* FS STATE ***********************************************************)
(**********************************************************************)

val default_block : nat
let default_block = 10 (* wait 10 steps by default *)

type read_result 'a =
    ReadError of string (* bad FD, etc. *)
  | ReadBlocked of nat (* pid of blocking process; 
                          only ever used in symbolic mode...
                          system mode just actually blocks! *)
  | ReadSuccess of 'a * bool (* EOF? *)
      
(* TODO 2018-08-14 file contents? will allow for use of, e.g., /etc/passwd *)
type file 'a = File | Dir of 'a

type file_type = 
    FileRegular 
  | FileDirectory 
  | FileCharacter
  | FileBlock
  | FileLink
  | FileFIFO
  | FileSocket

declare ocaml target_rep type file_type = `Unix.file_kind`
declare ocaml target_rep function FileRegular   = `Unix.S_REG`
declare ocaml target_rep function FileDirectory = `Unix.S_DIR`
declare ocaml target_rep function FileCharacter = `Unix.S_CHR`
declare ocaml target_rep function FileBlock     = `Unix.S_BLK`
declare ocaml target_rep function FileLink      = `Unix.S_LNK`
declare ocaml target_rep function FileFIFO      = `Unix.S_FIFO`
declare ocaml target_rep function FileSocket    = `Unix.S_SOCK`

(**********************************************************************)
(* OS CLASS ***********************************************************)
(**********************************************************************)

class ( OS 'a )
  (* PARSER INTERACTIONS *)
  val set_ps1 : os_state 'a -> symbolic_string -> os_state 'a
  val set_ps2 : os_state 'a -> symbolic_string -> os_state 'a

  (* SYSTEM CALLS *)
  val getpwnam : os_state 'a -> string -> maybe string
  val execve : 
    os_state 'a -> 
    symbolic_string -> (* cmd *)
    list symbolic_string -> (* argv *)
    env -> 
    bool -> (* try /bin/sh? *)
    os_state 'a * either string stmt
  val fork_and_subshell : 
    os_state 'a -> 
    stmt -> 
    bool (* bg? [for tty] *) -> 
    maybe pid (* pgrp id *) ->
    bool (* do job control? *) ->
    os_state 'a * pid
  val exit : os_state 'a -> os_state 'a
  val waitpid : 
    step_fun 'a -> (* for opportunistic scheduling in symbolic mode *)
    os_state 'a -> pid -> 
    os_state 'a * maybe (either evaluation_step (* step taken *) nat (* exit code *))  
  val waitchild : os_state 'a -> os_state 'a * maybe (pid * job_status)
  val handle_signal : os_state 'a -> signal -> maybe symbolic_string -> os_state 'a
  val signal_pid : os_state 'a -> signal -> pid -> bool (* as pg? *) -> os_state 'a * bool
  val pending_signal : os_state 'a -> os_state 'a * maybe signal
  val tc_setfg : os_state 'a -> pid -> os_state 'a * bool
  val set_job_control : os_state 'a -> bool -> os_state 'a
  val times : os_state 'a -> 
              (string (* utime *)            * string (* stime *) * 
               string (* utime + children *) * string (* stime + children *))

  val get_umask : os_state 'a -> perms
  val set_umask : os_state 'a -> perms -> os_state 'a

  (* FS CALLS *)

  val physical_cwd : os_state 'a -> string
  val chdir : os_state 'a -> path -> os_state 'a * maybe string
  val readdir : os_state 'a -> path -> set (path * file unit)
  val file_exists : os_state 'a -> path -> bool

  (* type of the file *)
  val file_type : os_state 'a -> path -> maybe file_type
  (* type of the file, following links *)
  val file_type_follow : os_state 'a -> path -> maybe file_type
  val file_size : os_state 'a -> path -> maybe nat
  val file_perms : os_state 'a -> path -> maybe perms
  val is_tty : os_state 'a -> fd -> bool
  val is_readable : os_state 'a -> path -> bool
  val is_writeable : os_state 'a -> path -> bool
  val is_executable : os_state 'a -> path -> bool

  val write_fd : os_state 'a -> fd -> string -> maybe (os_state 'a)
  val read_all_fd : 
    step_fun 'a -> (* for opportunistic scheduling in symbolic mode *)
    os_state 'a -> fd -> os_state 'a * either evaluation_step (maybe string)
  val read_line_fd 
      : os_state 'a -> bool (* allow backslash escapes? *) -> fd -> 
        os_state 'a * read_result string
  val close_fd : os_state 'a -> fd -> os_state 'a

  val pipe : os_state 'a -> os_state 'a * fd * fd

  val open_file_for_redir 
      : os_state 'a -> redir_type -> symbolic_string -> 
        os_state 'a * either string fd
  val open_heredoc : os_state 'a -> string -> either string (os_state 'a * fd)
  val close_and_save_fd : os_state 'a -> fd -> os_state 'a * either string saved_fds
  val renumber_fd : os_state 'a -> 
                    bool (* close orig? *) -> 
                    fd (* orig *) -> 
                    fd (* wanted number *) -> 
                    os_state 'a * either string saved_fds
  val restore_fd : os_state 'a -> fd -> saved_fd_info -> os_state 'a

end

(**********************************************************************)
(* SHELL/OS STATE FUNCTIONS *******************************************)
(**********************************************************************)

(* Logging and fuel ***************************************************)

val tick : forall 'a. os_state 'a -> os_state 'a
let tick os =
  <| os with fuel = Maybe.map (fun n -> if n > 0 then n - 1 else 0) os.fuel |>

val out_of_fuel : forall 'a. os_state 'a -> bool
let out_of_fuel os =
  match os.fuel with
  | Nothing -> false
  | Just n -> n = 0
  end

val string_of_fuel : forall 'a. os_state 'a -> string
let string_of_fuel os =
  match os.fuel with
  | Nothing -> "unbounded"
  | Just n -> stringFromNat n
  end

val entry_unspecified : log_entry -> bool
let entry_unspecified entry =
  match entry with
  | LogUnspecified _ -> true
  | LogUndefined _ -> true
  | _ -> false
  end

val entry_undefined : log_entry -> bool
let entry_undefined entry =
  match entry with
  | LogUndefined _ -> true
  | _ -> false
  end

val try_entry_step : log_entry -> maybe evaluation_step
let try_entry_step entry =
  match entry with
  | LogStep step -> Just step
  | _ -> Nothing
  end

val in_unspecified_state : forall 'a. os_state 'a -> bool
let in_unspecified_state os = any entry_unspecified os.log

val in_undefined_state : forall 'a. os_state 'a -> bool
let in_undefined_state os = any entry_undefined os.log

val extract_unspec : forall 'a. os_state 'a -> list string
let extract_unspec os =
  List.mapMaybe 
    (fun entry ->
      match entry with
      | LogUnspecified msg -> Just ("UNSPECIFIED: " ^ msg)
      | LogUndefined msg ->   Just ("  UNDEFINED: " ^ msg)
      | _ -> Nothing
      end)
    os.log

val extract_trace : forall 'a. os_state 'a -> list evaluation_step
let extract_trace os = List.mapMaybe try_entry_step os.log

val log : forall 'a. log_entry -> os_state 'a -> os_state 'a
let log entry os = <| os with log = entry::os.log |>

val log_msg : forall 'a. string -> os_state 'a -> os_state 'a
let log_msg msg = log (LogMessage msg)

val log_concretization : forall 'a. symbolic_string -> os_state 'a -> os_state 'a
let log_concretization ss = log (LogConcretization ss)

val log_unspecified : forall 'a. string -> os_state 'a -> os_state 'a
let log_unspecified msg = log (LogUnspecified msg)

val log_undefined : forall 'a. string -> os_state 'a -> os_state 'a
let log_undefined msg = log (LogUndefined msg)

val log_step : forall 'a. evaluation_step -> os_state 'a -> os_state 'a
let log_step step = log (LogStep step)

val concretize 
    : forall 'a. os_state 'a -> symbolic_string -> os_state 'a * bool * string
let concretize os0 ss =
  match try_concrete ss with
  | Nothing -> (log_concretization ss os0, true, string_of_symbolic_string ss)
  | Just s -> (os0, false, s)
  end     

val concretize_many 
    : forall 'a. os_state 'a -> fields -> os_state 'a * bool * list string
let concretize_many os0 f =
  foldr 
    (fun ss (os,before,strs) ->
      let (os',now,str) = concretize os ss in
      (os', now||before, str::strs))
    (os0, false, [])
    f

val concretize_fields
    : forall 'a. os_state 'a -> fields -> os_state 'a * bool * string
let rec concretize_fields os0 f =
  match f with
  | [] -> (os0, false, "")
  | [ss] -> concretize os0 ss
  | ss::f' ->
     let (os1, concretized1, s) = concretize os0 ss in
     let (os2, concretized2, s') = concretize_fields os1 f' in
     (os2, concretized1 || concretized2, s ^ " " ^ s')
  end     

(* Useful predicates **************************************************)

val is_interactive : forall 'a. os_state 'a -> bool
let is_interactive os = Set.member Sh_interactive os.sh.opts

val is_monitoring : forall 'a. os_state 'a -> bool
let is_monitoring os = Set.member Sh_monitor os.sh.opts

(* Reading and writing FDs ********************************************)

val try_write_fd : forall 'a. OS 'a => fd -> string -> os_state 'a -> os_state 'a
let try_write_fd fd s os =
  (* TODO 2018-03-02 is this the right behavior when an fd points to a bad fifo, e.g., STDERR is closed? *)
  match write_fd os fd s with
  | Just os' -> os'
  | Nothing -> os
  end
   
val write_stdout : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let write_stdout = try_write_fd STDOUT

val write_stderr : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let write_stderr = try_write_fd STDERR
                 
(* FS and path manipulation *******************************************)

val path_dotdot_rev_cl : list char -> list char
let rec path_dotdot_rev_cl path =
  match path with
  | [] -> [#'/'] (* stop at the root *)
  | [#'/'] -> [#'/'] (* stop at the root *)
  | #'/'::rest -> rest
  | _::rest -> path_dotdot_rev_cl rest
  end
                            
val dotdot : path -> path
let dotdot path = toString (reverse (path_dotdot_rev_cl (reverse (toCharList path))))

val is_dir : forall 'a. OS 'a => os_state 'a -> path -> bool
let is_dir os path = file_type os path = Just FileDirectory

val canonicalize_split_path : forall 'a. OS 'a => os_state 'a -> path -> list string -> maybe string
let rec canonicalize_split_path os path components =
  match components with
  | [] -> Just path
  | ""::components' -> canonicalize_split_path os path components' (* result of // *)
  | "."::components' -> canonicalize_split_path os path components'
  | ".."::components' -> 
     if is_dir os path
     then canonicalize_split_path os (dotdot path) components'
     else Nothing
  | dir::components' -> canonicalize_split_path os (join_path path dir) components'
  end

val canonicalize_path : forall 'a. OS 'a => os_state 'a -> path -> maybe path 
let canonicalize_path os path = 
  let (initial,path') =
    match (toCharList path) with
    | #'/'::#'/'::path' -> 
       ("//",toString path') (* save initial double slash---the rest will go *)
    | #'/'::path' -> ("/",toString path')
    | _ -> ("/",path)
    end
  in
  let components = split_string_on false (* not escapable *) #'/' path' in
  canonicalize_split_path os initial components

(* Job control ********************************************************)  

val active_jobs : forall 'a. OS 'a => os_state 'a -> os_state 'a * list job_info
let active_jobs os0 =
  let real_jobs = List.filter is_active_job os0.sh.jobs in
  (* TODO 2018-10-02 check jobs more seriously? *)
  (* TODO 2018-10-02 announce completed jobs? *)
  (<| os0 with sh = <| os0.sh with jobs = real_jobs |> |>, 
   real_jobs)

val add_job 
    : forall 'a. OS 'a =>
        os_state 'a ->
        pid -> stmt (* cmd *) ->
        os_state 'a
let add_job os0 pid cmd =
  let highest_job_num = 
    match os0.sh.jobs with
    | [] -> 0
    | _ -> maximum (map (fun job -> job.id) os0.sh.jobs)
    end in
  let new_job = 
    <| id = highest_job_num + 1;
       pid = pid;
       cmd = cmd;
       status = JobRunning;
       pgrp = pid (* TODO 2018-10-02 need real pgrp numbers *) |> 
  in
  let os1 =
    if is_monitoring os0
    then 
      let msg = "[" ^ stringFromNat new_job.id ^ "] " ^ string_of_pid pid ^ "\n" in
      write_stdout msg os0 
    else os0
  in
  <| os1 with sh = <| os1.sh with jobs = new_job::os1.sh.jobs |> |>

val delete_job 
    : forall 'a. OS 'a => os_state 'a -> nat (* job id *) -> os_state 'a
let delete_job os0 id =
  <| os0 with sh = 
      <| os0.sh with jobs = filter (fun j -> j.id <> id || is_active_job j) os0.sh.jobs |> |>

val delete_job_with_pid
    : forall 'a. OS 'a => os_state 'a -> pid -> os_state 'a
let delete_job_with_pid os0 pid =
  <| os0 with sh = 
      <| os0.sh with jobs = filter (fun j -> j.pid <> pid) os0.sh.jobs |> |>

let rec update_jobs_loop os0 changes =
  match waitchild os0 with
  | (os1, Nothing) -> (os1, changes)
  | (os1, Just (pid, cur_status)) ->
     match List.find (fun j -> j.pid = pid) os1.sh.jobs with
     | Nothing -> (* no such job... weird, keep going *)
        update_jobs_loop os1 changes
     | Just job -> (* update the job status! *)
       let job' = <| job with status = cur_status |> in
       let cur_jobs = map (fun j -> if j.id = job'.id then job' else j) os1.sh.jobs in
       let os1 = <| os1 with sh = <| os1.sh with jobs = cur_jobs |> |> in
       update_jobs_loop os1 (job'::changes)
     end
  end

val update_jobs : forall 'a. OS 'a => os_state 'a -> os_state 'a * list job_info (* changed *)
let update_jobs os0 = update_jobs_loop os0 []

(* Redirects **********************************************************)

val redirect : forall 'a. OS 'a => os_state 'a -> expanded_redir -> 
               os_state 'a * either string saved_fds
let redirect os0 er =
  match er with
  | ERFile ty wanted_fd [sfile] -> 
     match open_file_for_redir os0 ty sfile with
     | (os1, Left err) -> (os1, Left err)
     | (os1, Right new_fd) -> renumber_fd os1 true (* close *) new_fd wanted_fd
     end
  | ERFile _ _ fs -> (os0, Left ("expected single file field, got: " ^ string_of_fields fs))
  | ERDup _ty _close_orig orig_fd Nothing ->
     (* we're meant to close orig_fd *)
     close_and_save_fd os0 orig_fd
  | ERDup _ty close_orig orig_fd (Just wanted_fd) ->
     (* dash doesn't distinguish between the two types... because
        both resolve to the same dup2 call, since dup2 doesn't care
        about fd direction *)
     renumber_fd os0 close_orig wanted_fd orig_fd
  | ERHeredoc _ty wanted_fd fs -> 
     (* ty is irrelevant at this point---we used it to determine the
        kinds of expansion we'll go through *)
     let (os1,_concretized,s) = concretize_fields os0 fs in
     match open_heredoc os1 s with
     | Left err -> (os1, Left err)
     | Right (os2, new_fd) -> renumber_fd os2 true new_fd wanted_fd
     end
  end

val restore_fds : forall 'a. OS 'a => os_state 'a -> saved_fds -> os_state 'a
let restore_fds os saved_fds =
  foldr
    (fun (orig_fd, info) os' -> restore_fd os' orig_fd info)
    os
    saved_fds 

let rec really_do_redirs os0 ers =
  match ers with
  | [] -> (os0, Right [])
  | (er::ers') ->
     match redirect os0 er with
     | (os1, Left err) -> (os1, Left err)
     | (os1, Right saved) -> 
        match really_do_redirs os1 ers' with
        | (os2, Left err) -> (os2, Left err)
        | (os2, Right saved') -> (os2, Right (saved ++ saved'))
        end
     end
  end

val do_redirs : forall 'a. OS 'a => os_state 'a -> list expanded_redir -> 
                os_state 'a * either string saved_fds
let do_redirs os0 ers =
  if Set.member Sh_noexec os0.sh.opts
  then (os0, Right [])
  else really_do_redirs os0 ers

(* Pipes **************************************************************)

val run_pipe_loop : forall 'a. OS 'a =>
                 os_state 'a ->
                 list stmt -> 
                 fd ->
                 bool -> (* bg? [for tty] *)
                 maybe pid -> (* pipeline pgrp *)
                 os_state 'a * pid
let rec run_pipe_loop s0 stmts fd_prev bg pgid =
  match stmts with
  | [] -> fork_and_subshell s0 Done bg pgid true (* just run a trivial statement *)
  | [stmt] -> (* last one *)
     let (s1, last_pid) = 
       fork_and_subshell 
         s0 
         (with_redirs 
            (try_avoid_fork stmt)
            [ERDup ToFD true (* close orig *) STDIN (Just fd_prev)])
         bg
         pgid
         true
     in
     let s2 = close_fd s1 fd_prev in
     (s2, last_pid)
  | stmt::stmts' ->
     let (s1, fd_next, fd_write) = pipe s0 in
     let (s2, _pid) =
       fork_and_subshell 
         s1
         (with_redirs 
            (close_fd_and_then fd_next stmt) 
            [ERDup ToFD true (* close orig *) STDIN (Just fd_prev)
            ;ERDup ToFD true (* close orig *) STDOUT (Just fd_write)])
         bg
         pgid
         true
     in
     let s3 = close_fd s2 fd_prev in
     let s4 = close_fd s3 fd_write in
     run_pipe_loop s4 stmts' fd_next bg pgid
  end

(* TODO 2018-10-02 job control
   in order to supports jobs -l, need detailed pid and command info 
   if we just return a list of pids, that'll more or less cover us
   we'll probably have to change the representation of jobs, too:
     dash keeps a more detailed jobs spec, cf. jobs.h:66
 *)
val run_pipe : forall 'a. OS 'a =>
                 os_state 'a ->
                 list stmt ->
                 bool -> (* bg? [for tty] *)
                 os_state 'a * pid
let run_pipe s0 stmts bg =
  match stmts with
  | [] -> fork_and_subshell s0 Done bg Nothing true     (* just run a trivial statement *)
  | [stmt] -> fork_and_subshell s0 stmt bg Nothing true (* trivial pipe *)
  | stmt::stmts' ->                                     (* real pipe! *)
     (* set up first process *)
     let (s1, fd_next, fd_write) = pipe s0 in
     let (s2, pid) =
       fork_and_subshell
         s1
         (with_redirs 
            (close_fd_and_then fd_next stmt)
            [ERDup ToFD true (* close orig *) STDOUT (Just fd_write)]) 
         bg
         Nothing
         true
     in
     let s3 = close_fd s2 fd_write in
     (* hand off to the loop *)
     run_pipe_loop s3 stmts' fd_next bg (Just pid)
  end

(* Traps **************************************************************)
   
val update_trap : forall 'a. os_state 'a -> signal -> maybe symbolic_string -> os_state 'a
let update_trap os0 signal action =
  match action with
  | Nothing -> 
     <| os0 with sh = <| os0.sh with traps = Map.delete signal os0.sh.traps |> |>
  | Just cmd ->
     <| os0 with sh = <| os0.sh with traps = Map.insert signal cmd os0.sh.traps |> |>
  end

val clear_traps_for_subshell : shell_state -> shell_state * list signal
let clear_traps_for_subshell sh =
  let traps = Map_extra.toList sh.traps in
  let (ignored,handled) = 
    partition (fun (_signal,cmd) -> string_of_symbolic_string cmd = "") traps 
  in
   (* clear handled traps (but keep ignored ones) *)
  (<| sh with traps = Map.fromList ignored |>,
   (* indicate which handled traps are now cleared *)
   map fst handled)

val exit_trap : forall 'a. os_state 'a -> os_state 'a * maybe stmt
let exit_trap s0 =
  match Map.lookup EXIT s0.sh.traps with
  | Nothing -> (s0, Nothing)
  | Just ss_cmd -> (update_trap s0 EXIT Nothing, Just (command_eval ss_cmd))
  end

(* Parameters and the environment *************************************)

val printable_shell_env : forall 'a. os_state 'a -> string
let printable_shell_env os = 
  foldr (fun (k, v) s -> k ^ "=" ^ quote (string_of_symbolic_string v) ^ "\n" ^ s) 
    "" 
    (Map_extra.toList os.sh.env)

val lookup_positional_param : forall 'a. nat -> os_state 'a -> maybe symbolic_string
let lookup_positional_param num os = index os.sh.positional_params num

val get_function_params : forall 'a. os_state 'a -> fields
let get_function_params os =
  match os.sh.positional_params with
  | [] -> []
  | _::argv -> argv
  end

(* The result is nothing if the parameter is unset, and the empty string if it's null. *)
val lookup_string_param : forall 'a. os_state 'a -> string -> maybe symbolic_string
let lookup_string_param os str =
  match (readNat (toCharList str),str) with
  | (Right num,_) -> lookup_positional_param num os
  | (Left _,"$") -> Just (symbolic_string_of_nat os.sh.rootpid)
  | (Left _,"@") -> Assert_extra.failwith "broken invariant: called lookup_string_param on @"
  | (Left _,"*") -> Assert_extra.failwith "broken invariant: called lookup_string_param on *"
  | (Left _,"?") -> Just (symbolic_string_of_string (stringFromNat os.sh.exit_code))
  | (Left _,"-") -> 
     let char_opts = List.mapMaybe char_of_sh_opt (Set_extra.toList os.sh.opts) in
     Just (symbolic_string_of_string (toString char_opts))
  | (Left _,"#") -> 
     let num_params = length os.sh.positional_params in
     Just (symbolic_string_of_string (stringFromNat (max 0 (num_params - 1))))
     (* number of positional arguments excluding $0 *)
  | (Left _,_) -> Map.lookup str os.sh.env
  end

val lookup_param : forall 'a. os_state 'a -> string -> maybe fields
let lookup_param os str =
  if str = "@" || str = "*"
  then Just (get_function_params os)
  else match lookup_string_param os str with
       | Nothing -> Nothing
       | Just v -> Just [v]
       end

val lookup_concrete_param : forall 'a. os_state 'a -> string -> maybe string
let lookup_concrete_param os str =
  match lookup_param os str with
  | Nothing -> Nothing
  | Just fs -> try_concrete_fields fs
  end

val ps1 : forall 'a. os_state 'a -> string
let ps1 os =
  match lookup_concrete_param os "PS1" with
  | Nothing -> "$ "
  | Just prompt -> prompt
  end

val ps4 : forall 'a. os_state 'a -> string
let ps4 os =
  match lookup_concrete_param os "PS4" with
  | Nothing -> "+ "
  | Just prompt -> prompt
  end

val trace : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let trace msg os =
  if Set.member Sh_xtrace os.sh.opts && msg <> ""
  then write_stderr (ps4 os ^ msg ^ "\n") os
  else os
   
val get_path : forall 'a. os_state 'a -> string
let get_path os =
  match lookup_concrete_param os "PATH" with
  | Nothing -> ""
  | Just path -> path
  end

val is_readonly : forall 'a. string -> os_state 'a -> bool
let is_readonly var os = Set.member var os.sh.readonly
   
val internal_set_param 
    : forall 'a. string -> symbolic_string -> os_state 'a -> os_state 'a
let internal_set_param x v os = 
  <| os with sh = <| os.sh with env = Map.insert x v os.sh.env |> |>

val set_param : forall 'a. OS 'a =>
                  string -> symbolic_string -> os_state 'a -> either string (os_state 'a)
let set_param x v os0 = 
  if is_readonly x os0
  then Left (x ^ ": is read only")
  else if is_special_param x
  then Left (x ^ ": is a special parameter and not a valid identifier")
  else 
    let os1 = internal_set_param x v os0 in
    let os2 = 
      if Set.member Sh_allexport os1.sh.opts 
      then <| os1 with sh = <| os1.sh with export = Set.insert x os1.sh.export |> |>
      else os1
    in
    (* special variable handling for the parser and other internals *)
    let os3 = 
      if x = "OPTIND" 
      then <| os2 with sh = <| os2.sh with optoff = Nothing |> |>
      else if x = "PS1"
      then set_ps1 os2 v
      else if x = "PS2"
      then set_ps2 os2 v
      else os2
    in
    Right os3

val unset_param : forall 'a. string -> os_state 'a -> os_state 'a
let unset_param x os0 = <| os0 with sh = <| os0.sh with env = Map.delete x os0.sh.env |> |>

(* Functions and positional param management **************************)

val defun : forall 'a. string -> stmt -> os_state 'a -> os_state 'a
let defun name body os = 
  <| os with sh = <| os.sh with funcs = Map.insert name body os.sh.funcs |> |>

val lookup_function : forall 'a. string -> os_state 'a -> maybe stmt
let lookup_function name os = Map.lookup name os.sh.funcs
  
val set_function_params : forall 'a. nat -> fields -> os_state 'a -> os_state 'a
let set_function_params ln argv os =
  let new_params =
    match os.sh.positional_params with
    | [] -> []::argv
    | arg0::_ -> arg0::argv
    end in
  <| os with sh = <| os.sh with loop_nest = ln; positional_params = new_params |> |>

val enter_loop : forall 'a. os_state 'a -> os_state 'a
let enter_loop os = 
  <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest + 1 |> |>

val exit_loop : forall 'a. os_state 'a -> os_state 'a
let exit_loop os = 
  <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest - 1 |> |>
                                  
(* Special variables ($?, $!, $-) **************************************)

val exit_with : forall 'a. nat -> os_state 'a -> os_state 'a
let exit_with ec os = 
  <| os with sh = <| os.sh with exit_code = ec |> |>

val fail_with_code 
    : forall 'a. OS 'a => nat -> string -> os_state 'a -> os_state 'a
let fail_with_code ec msg os = exit_with ec (write_stderr (msg ^ "\n") os)

val fail_with : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let fail_with = fail_with_code 1

val set_last_pid : forall 'a. pid -> os_state 'a -> os_state 'a
let set_last_pid pid os = 
  internal_set_param "!" (symbolic_string_of_string (string_of_pid pid)) os

val set_sh_opt : forall 'a. OS 'a => os_state 'a -> sh_opt -> os_state 'a
let set_sh_opt os0 opt =
  let os1 = 
    if List.elem opt unimplemented_sh_opts
    then write_stderr ("set: warning: " ^ string_of_sh_opt opt ^ " is unimplemented\n") os0 
    else os0
  in
  let os2 = 
    if opt = Sh_monitor
    then
      (* If the -m option is in effect, SIGTTIN, SIGTTOU, and SIGTSTP
         signals shall be ignored. *)
      let os2_1 = handle_signal os1   SIGTTOU (Just []) in
      let os2_2 = handle_signal os2_1 SIGTTIN (Just []) in
      let os2_3 = handle_signal os2_2 SIGTSTP (Just []) in
      set_job_control os2_3 true
    else os1
  in
  <| os2 with sh = <| os2.sh with opts = Set.insert opt os2.sh.opts |> |>

val unset_sh_opt : forall 'a. OS 'a => os_state 'a -> sh_opt -> os_state 'a
let unset_sh_opt os0 opt =
  let os1 =
    if opt = Sh_monitor
    then
      let os1_1 = handle_signal os0   SIGTTOU Nothing in
      let os1_2 = handle_signal os1_1 SIGTTIN Nothing in
      let os1_3 = handle_signal os1_2 SIGTSTP Nothing in
      set_job_control os1_3 false
    else os0
  in
  <| os1 with sh = <| os1.sh with opts = Set.delete opt os1.sh.opts |> |>

(* Aliases ************************************************************)

val dash_setalias : string -> string -> unit
declare ocaml target_rep function dash_setalias = `Dash.setalias`

val dash_unalias : string -> unit
declare ocaml target_rep function dash_unalias = `Dash.unalias`

val set_alias : forall 'a. os_state 'a -> string -> string -> os_state 'a
let set_alias os name mapping =
  let _ = dash_setalias name mapping in
  <| os with sh = <| os.sh with aliases = Map.insert name mapping os.sh.aliases |> |>

val free_alias : forall 'a. os_state 'a -> string -> os_state 'a
let free_alias os name =
  let _ = dash_unalias name in
  <| os with sh = <| os.sh with aliases = Map.delete name os.sh.aliases |> |>

(* Subshell prep ******************************************************)

(* Returns a shell state that's ready for spawning.
 * 
 * Clears traps, resets shell state like loop nesting, etc.
 *
 * Returns a list of signals that _were_ handled so they can be set to default actions.
 *)
val prepare_subshell : shell_state -> shell_state * list signal
let prepare_subshell sh0 =
  let sh1 =
    <| sh0 with outermost = false;
                optoff = Nothing;
                jobs = [];
                loop_nest = 0
    |> in
  clear_traps_for_subshell sh1

