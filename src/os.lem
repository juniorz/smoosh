open import Smoosh_prelude
include import Signal_platform
import Debug
                                   
(**********************************************************************)
(* FS/OS CLASS ********************************************************)
(**********************************************************************)

type os_state 'a = <| 
   symbolic: 'a; 
   sh: shell_state
 |>                   

(* TODO 2018-08-14 file contents? will allow for use of, e.g., /etc/passwd *)           
type file 'a = File | Dir of 'a

(* Data structures for symbolic FDs *)
(* TODO 2018-09-04 have Fifo record which end we're working on

   trickiness: renumber_fd then needs to save some of that data.
   it's bigger refactor than you'd hope
 *)
type fd_tgt = FIFO of nat | Path of path

(* Mapping of FDs numbers *)
type fds = Map.map fd fd_tgt

val path_dotdot_rev_cl : list char -> list char
let rec path_dotdot_rev_cl path =
  match path with
  | [] -> [#'/'] (* stop at the root *)
  | [#'/'] -> [#'/'] (* stop at the root *)
  | #'/'::rest -> rest
  | _::rest -> path_dotdot_rev_cl rest
  end
                            
val dotdot : path -> path
let dotdot path = toString (reverse (path_dotdot_rev_cl (reverse (toCharList path))))

class ( OS 'a )
  (* SYSTEM CALLS *)
  val getpwnam : os_state 'a -> string -> maybe string
  val execve : 
    os_state 'a -> symbolic_string -> list symbolic_string -> env -> os_state 'a * stmt
  val fork_and_subshell : os_state 'a -> stmt -> os_state 'a * nat
  val exit : os_state 'a -> os_state 'a * maybe stmt
  val waitpid : 
    (* need to be passed step_eval to close recursive knot for the symbolic OS *)
    (os_state 'a -> stmt -> either (evaluation_step * os_state 'a) (evaluation_step * os_state 'a * stmt)) ->
    os_state 'a -> nat -> os_state 'a * maybe (either evaluation_step (* step taken *) nat (* exit code *))  
  val handle_signal : os_state 'a -> signal -> maybe symbolic_string -> os_state 'a
  val times : os_state 'a -> 
              (string (* utime *)            * string (* stime *) * 
               string (* utime + children *) * string (* stime + children *))

  val get_umask : os_state 'a -> perms
  val set_umask : os_state 'a -> perms -> os_state 'a

  (* FS CALLS *)
  val physical_cwd : os_state 'a -> string
  val chdir : os_state 'a -> path -> os_state 'a * maybe string
  val file_exists : os_state 'a -> path -> bool
  val isdir : os_state 'a -> path -> bool
  val isexec : os_state 'a -> path -> bool
  val readdir : os_state 'a -> path -> set (path * file unit)
  val write_fd : os_state 'a -> fd -> string -> maybe (os_state 'a)
  val read_fd : os_state 'a -> fd -> maybe (os_state 'a * string)
  val close_fd : os_state 'a -> fd -> os_state 'a
  val pipe : os_state 'a -> os_state 'a * fd * fd

  val open_file_for_redir : os_state 'a -> redir_type -> symbolic_string -> either string (os_state 'a * fd)
  val open_heredoc : os_state 'a -> string -> either string (os_state 'a * fd)
  val close_and_save_fd : os_state 'a -> fd -> either string (os_state 'a * saved_fds)
  val renumber_fd : os_state 'a -> 
                    bool (* close orig? *) -> 
                    fd (* orig *) -> 
                    fd (* wanted number *) -> 
                    either string (os_state 'a * saved_fds)
  val restore_fd : os_state 'a -> fd -> saved_fd_info -> os_state 'a
end

(**********************************************************************)
(* SHELL/OS STATE FUNCTIONS *******************************************)
(**********************************************************************)

val try_write_fd : forall 'a. OS 'a => fd -> string -> os_state 'a -> os_state 'a
let try_write_fd fd s os =
  (* TODO 2018-03-02 is this the right behavior when an fd points to a bad fifo, e.g., STDERR is closed? *)
  match write_fd os fd s with
  | Just os' -> os'
  | Nothing -> os
  end
   
val write_stdout : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let write_stdout = try_write_fd STDOUT

val write_stderr : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let write_stderr = try_write_fd STDERR

val canonicalize_split_path : forall 'a. OS 'a => os_state 'a -> path -> list string -> maybe string
let rec canonicalize_split_path os path components =
  match components with
  | [] -> Just path
  | ""::components' -> canonicalize_split_path os path components' (* result of // *)
  | "."::components' -> canonicalize_split_path os path components'
  | ".."::components' -> 
     if isdir os path
     then canonicalize_split_path os (dotdot path) components'
     else Nothing
  | dir::components' -> canonicalize_split_path os (join_path path dir) components'
  end

val canonicalize_path : forall 'a. OS 'a => os_state 'a -> path -> maybe path 
let canonicalize_path os path = 
  let (initial,path') =
    match (toCharList path) with
    | #'/'::#'/'::path' -> 
       ("//",toString path') (* save initial double slash---the rest will go *)
    | #'/'::path' -> ("/",toString path')
    | _ -> ("/",path)
    end
  in
  let components = split_string_on false (* not escapable *) #'/' path' in
  canonicalize_split_path os initial components

val active_jobs : forall 'a. OS 'a => os_state 'a -> os_state 'a * list job_info
let active_jobs os0 =
  let real_jobs = List.filter is_active_job os0.sh.jobs in
  (* TODO 2018-10-02 check jobs more seriously? *)
  (* TODO 2018-10-02 announce completed jobs? *)
  (<| os0 with sh = <| os0.sh with jobs = real_jobs |> |>, 
   real_jobs)

val redirect : forall 'a. OS 'a => os_state 'a -> expanded_redir -> either string (os_state 'a * saved_fds)
let redirect os0 er =
  match er with
  | ERFile ty wanted_fd [sfile] -> 
     match open_file_for_redir os0 ty sfile with
     | Left err -> Left err
     | Right (os1,new_fd) -> renumber_fd os1 true (* close *) new_fd wanted_fd
     end
  | ERFile _ _ fs -> Left ("expected single file field, got: " ^ string_of_fields fs)
  | ERDup _ty _close_orig orig_fd Nothing ->
     (* we're meant to close orig_fd *)
     close_and_save_fd os0 orig_fd
  | ERDup _ty close_orig orig_fd (Just wanted_fd) ->
     (* dash doesn't distinguish between the two types... because
        both resolve to the same dup2 call, since dup2 doesn't care
        about fd direction *)
     renumber_fd os0 close_orig wanted_fd orig_fd
  | ERHeredoc _ty wanted_fd fs -> 
     (* ty is irrelevant at this point---we used it to determine the
        kinds of expansion we'll go through *)
     match try_concrete_fields fs with
     | Nothing ->
        Left ("couldn't open symbolic heredoc: " ^ string_of_fields fs)
     | Just s ->
        match open_heredoc os0 s with
        | Left err -> Left err
        | Right (os1, new_fd) -> renumber_fd os1 true new_fd wanted_fd
        end
     end
  end

val restore_fds : forall 'a. OS 'a => os_state 'a -> saved_fds -> os_state 'a
let restore_fds os saved_fds =
  foldr
    (fun (orig_fd, info) os' -> restore_fd os' orig_fd info)
    os
    saved_fds 

val fork_and_execve : forall 'a. OS 'a =>
    os_state 'a -> symbolic_string -> list symbolic_string -> env -> os_state 'a * nat
let fork_and_execve s0 cmd args env =
  fork_and_subshell s0 (Exec cmd args env)

val run_pipe_loop : forall 'a. OS 'a =>
                 os_state 'a ->
                 list stmt -> 
                 fd ->
                 os_state 'a * nat
let rec run_pipe_loop s0 stmts fd_prev =
  match stmts with
  | [] -> fork_and_subshell s0 Done (* just run a trivial statement *)
  | [stmt] -> (* last one *)
     let (s1, last_pid) = 
       fork_and_subshell s0 
         (with_redirs 
            stmt 
            [ERDup ToFD true (* close orig *) STDIN (Just fd_prev)]) in
     let s2 = close_fd s1 fd_prev in
     (s2, last_pid)
  | stmt::stmts' ->
     let (s1, fd_next, fd_write) = pipe s0 in
     let (s2, _pid) =
       fork_and_subshell s1
         (with_redirs 
            (close_fd_and_then fd_next stmt) 
            [ERDup ToFD true (* close orig *) STDIN (Just fd_prev )
            ;ERDup ToFD true (* close orig *) STDOUT (Just fd_write )]) in
     let s3 = close_fd s2 fd_prev in
     let s4 = close_fd s3 fd_write in
     run_pipe_loop s4 stmts' fd_next
  end

val run_pipe : forall 'a. OS 'a =>
                 os_state 'a ->
                 list stmt ->
                 os_state 'a * nat
let run_pipe s0 stmts =
  match stmts with
  | [] -> fork_and_subshell s0 Done       (* just run a trivial statement *)
  | [stmt] -> fork_and_subshell s0 stmt   (* trivial pipe *)
  | stmt::stmts' ->                            (* real pipe! *)
     (* set up first process *)
     let (s1, fd_next, fd_write) = pipe s0 in
     let (s2, _pid) =
       fork_and_subshell s1
         (with_redirs 
            (close_fd_and_then fd_next stmt)
            [ERDup ToFD true (* close orig *) STDOUT (Just fd_write)]) in
     let s3 = close_fd s2 fd_write in
     (* hand off to the loop *)
     run_pipe_loop s3 stmts' fd_next
  end
   
val update_trap : forall 'a. os_state 'a -> signal -> maybe symbolic_string -> os_state 'a
let update_trap os0 signal action =
  match action with
  | Nothing -> 
     <| os0 with sh = <| os0.sh with traps = Map.delete signal os0.sh.traps |> |>
  | Just cmd ->
     <| os0 with sh = <| os0.sh with traps = Map.insert signal cmd os0.sh.traps |> |>
  end

val clear_traps_for_subshell : shell_state -> shell_state * list signal
let clear_traps_for_subshell sh =
  let traps = Map_extra.toList sh.traps in
  let (ignored,handled) = 
    partition (fun (_signal,cmd) -> string_of_symbolic_string cmd = "") traps 
  in
   (* clear handled traps (but keep ignored ones) *)
  (<| sh with traps = Map.fromList ignored |>,
   (* indicate which handled traps are now cleared *)
   map fst handled)

val printable_shell_env : forall 'a. os_state 'a -> string
let printable_shell_env os = 
  foldr (fun (k, v) s -> k ^ "=" ^ quote (string_of_symbolic_string v) ^ "\n" ^ s) 
    "" 
    (Map_extra.toList os.sh.env)

val lookup_positional_param : forall 'a. nat -> os_state 'a -> maybe symbolic_string
let lookup_positional_param num os = index os.sh.positional_params num

val is_special_param : string -> bool
let is_special_param x =
  match readNat (toCharList x) with
  | Right _ -> true
  | Left _ -> elem x ["@"; "*"; "#"; "?"; "-"; "$"; "!"]
  end

(* The result is nothing if the parameter is unset, and the empty string if it's null. *)
val lookup_nonat_param : forall 'a. os_state 'a -> string -> maybe symbolic_string
let lookup_nonat_param os str =
  match (readNat (toCharList str),str) with
  | (Right num,_) -> lookup_positional_param num os
  | (Left _,"@") -> Nothing (* specifically excluded! *)
  | (Left _,"*") -> 
     match os.sh.positional_params with
     | [] -> Just []
     | _::params -> Just (symbolic_string_of_fields params)
     end
  | (Left _,"#") -> 
     let num_params = length os.sh.positional_params in
     Just (symbolic_string_of_string (stringFromNat (max 0 (num_params - 1))))
     (* number of positional arguments excluding $0 *)
  | (Left _,_) -> Map.lookup str os.sh.env
  end

val lookup_param : forall 'a. os_state 'a -> string -> maybe fields
let lookup_param os str =
  if str = "@"
  then match os.sh.positional_params with
       | [] -> Just []
       | _::params -> Just params
       end
  else match lookup_nonat_param os str with
       | Nothing -> Nothing
       | Just v -> Just [v]
       end

val lookup_concrete_param : forall 'a. os_state 'a -> string -> maybe string
let lookup_concrete_param os str =
  match lookup_param os str with
  | Nothing -> Nothing
  | Just fs -> try_concrete_fields fs
  end

val ps1 : forall 'a. os_state 'a -> string
let ps1 os =
  match lookup_concrete_param os "PS1" with
  | Nothing -> "$ "
  | Just prompt -> prompt
  end

val ps4 : forall 'a. os_state 'a -> string
let ps4 os =
  match lookup_concrete_param os "PS4" with
  | Nothing -> "+ "
  | Just prompt -> prompt
  end

val get_path : forall 'a. os_state 'a -> string
let get_path os =
  match lookup_concrete_param os "PATH" with
  | Nothing -> ""
  | Just path -> path
  end

val is_readonly : forall 'a. string -> os_state 'a -> bool
let is_readonly var os = Set.member var os.sh.readonly
   
val defun : forall 'a. string -> stmt -> os_state 'a -> os_state 'a
let defun name body os = 
  <| os with sh = <| os.sh with funcs = Map.insert name body os.sh.funcs |> |>

val lookup_function : forall 'a. string -> os_state 'a -> maybe stmt
let lookup_function name os = Map.lookup name os.sh.funcs

val internal_set_param 
    : forall 'a. string -> symbolic_string -> os_state 'a -> os_state 'a
let internal_set_param x v os = 
  <| os with sh = <| os.sh with env = Map.insert x v os.sh.env |> |>

val set_param : forall 'a.
                  string -> symbolic_string -> os_state 'a -> either string (os_state 'a)
let set_param x v os0 = 
  if is_readonly x os0
  then Left (x ^ ": is read only")
  else if is_special_param x
  then Left (x ^ ": is a special parameter and not a valid identifier")
  else 
    let os1 = internal_set_param x v os0 in
    let os2 = 
      if Set.member Sh_allexport os1.sh.opts 
      then <| os1 with sh = <| os1.sh with export = Set.insert x os1.sh.export |> |>
      else os1
    in
    Right os2
  
val set_function_params : forall 'a. nat -> fields -> os_state 'a -> os_state 'a
let set_function_params ln argv os =
  let new_params =
    match os.sh.positional_params with
    | [] -> []::argv
    | arg0::_ -> arg0::argv
    end in
  <| os with sh = <| os.sh with loop_nest = ln; positional_params = new_params |> |>

val enter_loop : forall 'a. os_state 'a -> os_state 'a
let enter_loop os = 
  <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest + 1 |> |>

val exit_loop : forall 'a. os_state 'a -> os_state 'a
let exit_loop os = 
  <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest - 1 |> |>

val exit_with : forall 'a. nat -> os_state 'a -> os_state 'a
let exit_with ec os = 
  internal_set_param "?" (symbolic_string_of_string (stringFromNat ec)) os

val fail_with : forall 'a. OS 'a => string -> os_state 'a -> os_state 'a
let fail_with msg os = exit_with 1 (write_stderr (msg ^ "\n") os)

val get_last_exit_code : forall 'a. os_state 'a -> maybe nat
let get_last_exit_code os =
  match lookup_concrete_param os "?" with
  | Nothing -> Nothing
  | Just s -> 
     match readNat (toCharList s) with
     | Right n -> Just n
     | Left _err -> Nothing
     end
  end

val set_last_pid : forall 'a. nat -> os_state 'a -> os_state 'a
let set_last_pid pid os = 
  internal_set_param "!" (symbolic_string_of_string (stringFromNat pid)) os

let internal_fixup_dollardash os =
  let char_opts = List.mapMaybe char_of_sh_opt (Set_extra.toList os.sh.opts) in
  let dash = toString char_opts in
  internal_set_param "-" (symbolic_string_of_string dash) os

val set_sh_opt : forall 'a. OS 'a => os_state 'a -> sh_opt -> os_state 'a
let set_sh_opt os opt =
  let os' = 
    if List.elem opt unimplemented_sh_opts
    then
      write_stderr ("set: warning: " ^ string_of_sh_opt opt ^ " is unimplemented\n") os
    else os
  in
  internal_fixup_dollardash
    <| os' with sh = <| os.sh with opts = Set.insert opt os.sh.opts |> |>

val unset_sh_opt : forall 'a. os_state 'a -> sh_opt -> os_state 'a
let unset_sh_opt os opt =
  internal_fixup_dollardash
    <| os with sh = <| os.sh with opts = Set.delete opt os.sh.opts |> |>

val is_interactive : forall 'a. os_state 'a -> bool
let is_interactive os = Set.member Sh_interactive os.sh.opts

val dash_setalias : string -> string -> unit
declare ocaml target_rep function dash_setalias = `Dash.setalias`

val dash_unalias : string -> unit
declare ocaml target_rep function dash_unalias = `Dash.unalias`

val set_alias : forall 'a. os_state 'a -> string -> string -> os_state 'a
let set_alias os name mapping =
  let _ = dash_setalias name mapping in
  <| os with sh = <| os.sh with aliases = Map.insert name mapping os.sh.aliases |> |>

val free_alias : forall 'a. os_state 'a -> string -> os_state 'a
let free_alias os name =
  let _ = dash_unalias name in
  <| os with sh = <| os.sh with aliases = Map.delete name os.sh.aliases |> |>
  
(**********************************************************************)
(* SYMBOLIC FS STATE **************************************************)
(**********************************************************************)

(* Broadly, directories map to contents, which are dir trees or files.
 * For now, fine, just using for pathname expansion.
 * TODO: Ultimately, rely on SibylFS's detailed model *)

type symbolic_fs = <|
  parent: maybe symbolic_fs;
  contents: Map.map string (file symbolic_fs)
|>

type fs = symbolic_fs (* shim *)

let symbolic_fs_dotdot fs =
  match fs.parent with
  | Nothing -> fs
  | Just fs' -> fs'
  end

let symbolic_fs_subdir fs name = 
  match Map.lookup name fs.contents with
  | Just (Dir fs) -> Just fs
  | _ -> Nothing
  end

val symbolic_fs_resolve_comps : symbolic_fs -> list string -> maybe (file symbolic_fs)
let rec symbolic_fs_resolve_comps fs comps =
  match comps with
  | [] -> Just (Dir fs)
  | ""::comps' -> symbolic_fs_resolve_comps fs comps'
  | "."::comps' -> symbolic_fs_resolve_comps fs comps'
  | ".."::comps' -> symbolic_fs_resolve_comps (symbolic_fs_dotdot fs) comps'
  | [file] -> Map.lookup file fs.contents
  | dir::comps' ->
     match symbolic_fs_subdir fs dir with
     | Just fs' -> symbolic_fs_resolve_comps fs' comps'
     | Nothing -> Nothing
     end
  end

val symbolic_fs_resolve_path : symbolic_fs -> string -> maybe (file symbolic_fs)
let symbolic_fs_resolve_path fs path =
  let comps = split_string_on false (* not escapable *) #'/' path in
  symbolic_fs_resolve_comps fs comps

val symbolic_fs_resolve_dir : symbolic_fs -> string -> maybe symbolic_fs
let symbolic_fs_resolve_dir fs path = 
  match symbolic_fs_resolve_path fs path with
  | Just (Dir fs') -> Just fs'
  | _ -> Nothing
  end

(* empty FS/OS for testing purposes *)    
let fs_empty =
  <| parent = Nothing;
     contents = Map.empty
  |>

(**********************************************************************)
(* SYMBOLIC OS STATE **************************************************)
(**********************************************************************)

(* FIFO pipes for symbolic FDs *)             
type fifo = string
          
and proc =
    Shell of stmt * shell_state * fds
  | Zombie of nat (* exit code *)

and symbolic = <|
    passwd: Map.map string string; (* TODO relate to /etc/passwd, emulate getpwnam properly in getpwdir *)
    sh_fds: fds;
    fs_root: fs;
    fifos: list fifo;
    procs: list proc;
    exited: bool;
    umask: perms
  |>
    
(* INVARIANT: the second number here is referring to the indices in os_empty.fifos below *)
let fds_default : fds = 
  Map.insert STDIN (FIFO 0) 
 (Map.insert STDOUT (FIFO 1) 
 (Map.insert STDERR (FIFO 2) 
  Map.empty))

let symbolic_empty : symbolic = <|
    sh_fds = fds_default;
    passwd = Map.empty;
    fs_root = fs_empty;
    fifos = ["" (* STDIN *)
            ;"" (* STDOUT *)
            ;"" (* STDERR *)
            ];
    procs = [];
    exited = false;
    umask = default_umask
 |>

let os_empty : os_state symbolic = <| symbolic = symbolic_empty; sh = default_shell_state |>
  
(**********************************************************************)
(* SYMBOLIC OS STATE INSTANCE *****************************************)
(**********************************************************************)

val compare_by_first : forall 'a 'b. Ord 'a => ('a * 'b) -> ('a * 'b) -> ordering
let compare_by_first (a, _) (a', _) = compare a a'

val symbolic_resolve_fd : symbolic -> fd -> maybe nat
let symbolic_resolve_fd symbolic fd =
  match Map.lookup fd symbolic.sh_fds with
  | Just (FIFO fifo_num) -> Just fifo_num
  (* TODO 2018-03-23 is this the right behavior when fd points to a file? *)   
  (* TODO 2018-03-02 is this the right behavior when fd doesn't exist? *)
  | _ -> Nothing
  end
    
val mkfifo : symbolic -> symbolic * nat  
let mkfifo symbolic =
  let fifo_num = length symbolic.fifos in
  (<| symbolic with fifos = symbolic.fifos ++ [""] |>, fifo_num)

val write_fifo : symbolic -> nat -> string -> maybe (symbolic)
let write_fifo symbolic fifo_num s =
  match adjust_nth symbolic.fifos fifo_num (fun fifo_cts -> (fifo_cts ^ s, ())) with
  | Nothing -> Nothing
  | Just (new_fifos,()) -> Just <| symbolic with fifos = new_fifos |>
  end

val read_fifo : symbolic -> nat -> maybe (symbolic * string)
let read_fifo symbolic fifo_num =
  match adjust_nth symbolic.fifos fifo_num (fun fifo_cts -> ("",fifo_cts)) with
  | Nothing -> Nothing
  | Just (new_fifos,s) -> Just (<| symbolic with fifos = new_fifos |>, s)
  end

val symbolic_fresh_fd : fds -> fd
let symbolic_fresh_fd sh_fds = 
  match Set.findMax (Map.domain sh_fds) with
  | Nothing -> 0
  | Just max -> max + 1
  end

instance (OS symbolic)
  let getpwnam os u = Map.lookup u os.symbolic.passwd

  let execve os prog argv env =                     
    (os, Exec prog argv env)

  let fork_and_subshell os stmt =
    let proc_num = length os.symbolic.procs in
    let (sh,_handlers) = clear_traps_for_subshell os.sh in
    let proc = Shell stmt sh os.symbolic.sh_fds in
    (* When a subshell is entered, traps that are not being ignored
       shall be set to the default actions, except in the case of a
       command substitution containing only a single trap command,
       when the traps need not be altered. Implementations may check
       for this case using only lexical analysis; for example, if
       `trap` and $( trap -- ) do not alter the traps in the subshell,
       cases such as assigning var=trap and then using $($var) may
       still alter them. This does not imply that the trap command
       cannot be used within the subshell to set new traps.  *) 
    (<| os with symbolic = <| os.symbolic with procs = os.symbolic.procs ++ [proc] |> |>, 
     proc_num)

  let exit os0 = 
    if os0.symbolic.exited
    then (os0, Nothing)
    else
      match Map.lookup EXIT os0.sh.traps with
      | Nothing -> (os0, Nothing)
      | Just cmd -> 
         let os1 = <| os0 with symbolic = <| os0.symbolic with exited = true |> |> in
         (os1, Just (command_eval cmd))
      end

  let waitpid step_eval os0 pid =
    match index os0.symbolic.procs pid with
    | Nothing -> (os0, Nothing)
    | Just (Zombie ec) -> (os0, Just (Right ec))
    | Just (Shell stmt sh' fds') ->
       let os1 = <| os0 with sh = sh'; symbolic = <| os0.symbolic with sh_fds = fds' |> |> in
       match step_eval os1 stmt with
       | Left (_step, os2) -> 
          (<| os2 with sh = os0.sh; 
                       symbolic = <| os2.symbolic with 
                                        sh_fds = os0.symbolic.sh_fds;
                                        procs = update os2.symbolic.procs pid (Zombie 1) |> |>, 
           Just (Right 1)) (* errored, signal with code *)
       | Right (_step, os2, Done) ->
          (* terminated! grab the code, update everything *)
          let ec = (* can't use get_last_exit_code because we're DEFINING the type class *)
            match Map.lookup "?" os2.sh.env with
            | Nothing -> 255
            | Just ss -> 
               match try_concrete ss with
               | Nothing -> 255
               | Just s -> 
                  match readNat (toCharList s) with
                  | Right n -> 
                     n
                  | Left _err -> 255
                  end
               end
            end in
          (<| os2 with sh = os0.sh; 
                       symbolic = <| os2.symbolic with 
                                        sh_fds = os0.symbolic.sh_fds;
                                        procs = update os2.symbolic.procs pid (Zombie ec) |> |>,
           Just (Right ec))
       | Right (step, os2, stmt') ->
          (<| os2 with sh = os0.sh; 
                       symbolic = <| os2.symbolic with 
                                        sh_fds = os0.symbolic.sh_fds;
                                        procs = 
                                          List.update os2.symbolic.procs pid 
                                            (Shell stmt' os2.sh os2.symbolic.sh_fds) |> |>,
           Just (Left (XSNested step (XSProc stmt'))))
       end
    end

  let handle_signal = update_trap

  let times _os0 = ("0m0s", "0m0s", "0m0s", "0m0s")

  let get_umask os0 = os0.symbolic.umask

  let set_umask os0 mask = 
    <| os0 with symbolic = <| os0.symbolic with umask = mask |> |>

  let readdir os path =
    (* TODO 2018-08-21 will be buggy on non-absolute paths *)
    match symbolic_fs_resolve_dir os.symbolic.fs_root path with
    | Nothing -> Set.empty
    | Just fs -> 
       Set.map (fun (name,file) ->
           (name,
            match file with
            | File -> File
            | Dir _ -> Dir ()
            end))
         (* Only compare equality for the set based on the keys.
          * Comparing equality of a non-trivial file system will loop infinitely. *)
         (toSetBy compare_by_first fs.contents)
    end

  let physical_cwd os = os.sh.cwd

  let chdir os path =
    match symbolic_fs_resolve_dir os.symbolic.fs_root path with
    | Nothing -> (os,Just ("no such directory: " ^ path))
    | Just _ -> (<| os with sh = <| os.sh with cwd = path |> |>, Nothing)
    end

  (* TODO 2018-09-04 symbolic fs needs file contents/types *)
  let file_exists os path =
    match symbolic_fs_resolve_path os.symbolic.fs_root path with
    | Nothing -> false
    | Just _ -> true
    end

  let isdir os path =
    match symbolic_fs_resolve_path os.symbolic.fs_root path with
    | Just (Dir _) -> true
    | Just File -> false
    | Nothing -> false
    end

  let isexec os path =
    match symbolic_fs_resolve_path os.symbolic.fs_root path with
    | Nothing -> false
    | Just _ -> true
    end

  let write_fd os fd s =
    match symbolic_resolve_fd os.symbolic fd with
    | Just fifo_num -> 
       match write_fifo os.symbolic fifo_num s with
       | Nothing -> Nothing
       | Just symbolic' -> Just <| os with symbolic = symbolic' |>
       end
    | Nothing -> Nothing
    end
  
  let read_fd os fd =
    match symbolic_resolve_fd os.symbolic fd with
    | Just fifo_num -> 
       match read_fifo os.symbolic fifo_num with
       | Nothing -> Nothing
       | Just (symbolic', s) -> Just (<| os with symbolic = symbolic' |>, s)
       end
    | Nothing -> Nothing
  end

  let close_fd os fd = 
    <| os with symbolic = <| os.symbolic with sh_fds = Map.delete fd os.symbolic.sh_fds |> |>

  let pipe os0 =
    let (sym1, fifo_num) = mkfifo os0.symbolic in
    (* get an FD number for reading *)
    let fd_read = symbolic_fresh_fd sym1.sh_fds in
    let fds' = Map.insert fd_read (FIFO fifo_num) sym1.sh_fds in
    (* get an FD number for writing *)
    let fd_write = symbolic_fresh_fd fds' in
    let fds'' = Map.insert fd_write (FIFO fifo_num) fds' in
    (<| os0 with symbolic = <| sym1 with sh_fds = fds'' |> |>, fd_read, fd_write)

  let open_file_for_redir _os _ty _file = 
    let _ = Debug.print_endline "open_file_for_redir" in
    Left "symbolic file redirects are unimplemented"

  let open_heredoc os0 s =
    let (sym1, fifo_num) = mkfifo os0.symbolic in
    let fd = symbolic_fresh_fd sym1.sh_fds in
    (* update the FD map with a read FD *)
    let sym2 = <| sym1 with sh_fds = Map.insert fd (FIFO fifo_num) sym1.sh_fds |> in
    (* don't bother making a write FD, just write to the FIFO buffer *)
    match write_fifo sym2 fifo_num s with
    | Nothing -> Left "broken pipe"
    | Just sym3 -> Right (<| os0 with symbolic = sym3 |>, fd)
    end

  let close_and_save_fd os0 fd = 
    (* precomupte potential next os *)
    let sym1 = <| os0.symbolic with sh_fds = Map.delete fd os0.symbolic.sh_fds |> in
    let os1 = <| os0 with symbolic = sym1 |> in
    match Map.lookup fd os0.symbolic.sh_fds with
    | Nothing -> 
       (* already closed, nothing to save *)
       Right (os1, [])
    | Just (FIFO fifo_num) ->
       (* hold on to the FIFO number *)
       Right (os1, [(fd, Saved fifo_num)])
    | Just (Path _path) ->
       Left "TODO 2018-08-24 symbolic path FDs unimplemented"
    end

  let renumber_fd os0 close new_fd wanted_fd = 
    if new_fd = wanted_fd
    then Right (os0, if close then [(wanted_fd, Close)] else [])
    else
      match Map.lookup new_fd os0.symbolic.sh_fds with
      | Nothing -> 
         Left "broken pipe (tried to renumber closed fd)"
      | Just new_tgt ->
        let saved = 
          match Map.lookup wanted_fd os0.symbolic.sh_fds with
          | Nothing -> 
             (* the wanted_fd is free... great! *)
             []
          | Just (FIFO fifo_num) ->
             (* the wanted fd is in use, points to a fifo... hold on to the number *)
             [(wanted_fd, Saved fifo_num)]
          | Just (Path _path) ->
             (* the wanted fd is in use, points to a file *)
             (* TODO 2018-08-24 symbolic path FDs unimplemented *)
             []
          end in
        let fds0 = Map.insert wanted_fd new_tgt os0.symbolic.sh_fds in
        let fds1 = if close then Map.delete new_fd fds0 else fds0 in
        Right (<| os0 with symbolic = <| os0.symbolic with sh_fds = fds1 |> |>, saved)
      end

  let restore_fd os0 fd info =
    match info with
    | Saved fifo_num -> 
       let fds = Map.insert fd (FIFO fifo_num) os0.symbolic.sh_fds in
       <| os0 with symbolic = <| os0.symbolic with sh_fds = fds |> |>
    | Close ->
       let fds = Map.delete fd os0.symbolic.sh_fds in
       <| os0 with symbolic = <| os0.symbolic with sh_fds = fds |> |>
    end
end

val set_pwdir : string -> string -> os_state symbolic -> os_state symbolic
let set_pwdir u d os = 
  <| os with symbolic = <| os.symbolic with passwd = Map.insert u d (os.symbolic.passwd) |> |>

val get_stdout : os_state symbolic -> string
let get_stdout os = fromMaybe "" (index os.symbolic.fifos 1)

(**********************************************************************)
(* REAL OS STATE INSTANCE *********************************************)
(**********************************************************************)

type system = unit

let force_concrete ss =
  match try_concrete ss with
  | Just s -> s
  | Nothing -> 
     failwith ("Couldn't convert symbolic string, aborting:\n\n" ^ string_of_symbolic_string ss)
  end

(* generate an 'environ'-style string given an env *)
let environ (env : env) : list string =
  foldr (fun (x,v) l -> (x ^ "=" ^ force_concrete v) :: l) [] (Map_extra.toList env)

val real_getpwnam : string -> maybe string
declare ocaml target_rep function real_getpwnam = `System.real_getpwnam`

val real_execve : forall 'a. string -> list string -> list string -> 'a
declare ocaml target_rep function real_execve = `System.real_execve`

val real_fork_and_eval : list int -> os_state system -> stmt -> nat
declare ocaml target_rep function real_fork_and_eval = `System.real_fork_and_eval`

val real_waitpid : nat -> nat
declare ocaml target_rep function real_waitpid = `System.real_waitpid`

val real_handle_signal : int -> maybe string -> unit
declare ocaml target_rep function real_handle_signal = `System.real_handle_signal`

val real_exit : forall 'a. nat -> 'a
declare ocaml target_rep function real_exit = `exit`

val real_times : unit -> string * string * string * string
declare ocaml target_rep function real_times = `System.real_times`

val real_get_umask : unit -> nat
declare ocaml target_rep function real_get_umask = `System.real_get_umask`

val real_set_umask : nat -> unit
declare ocaml target_rep function real_set_umask = `System.real_set_umask`

val real_physical_cwd : unit -> string
declare ocaml target_rep function real_physical_cwd = `Unix.getcwd`

val real_chdir : path -> maybe string
declare ocaml target_rep function real_chdir = `System.real_chdir`

val real_exists : path -> bool
declare ocaml target_rep function real_exists = `System.real_exists`

val real_isdir : path -> bool
declare ocaml target_rep function real_isdir = `System.real_isdir`

val real_isexec : path -> bool
declare ocaml target_rep function real_isexec = `System.real_isexec`

val real_readdir : string -> list (string * bool)
declare ocaml target_rep function real_readdir = `System.real_readdir`

val real_write_fd : fd -> string -> bool
declare ocaml target_rep function real_write_fd = `System.real_write_fd`

val real_read_fd : fd -> maybe string
declare ocaml target_rep function real_read_fd = `System.real_read_fd`

val real_pipe : unit -> fd * fd
declare ocaml target_rep function real_pipe = `System.real_pipe`

type open_flags
declare ocaml target_rep type open_flags = `System.open_flags` 
val to_flags : open_flags
declare ocaml target_rep function to_flags = `System.to_flags`
val clobber_flags : open_flags
declare ocaml target_rep function clobber_flags = `System.clobber_flags`
val from_flags : open_flags   
declare ocaml target_rep function from_flags = `System.from_flags`
val fromto_flags : open_flags
declare ocaml target_rep function fromto_flags = `System.fromto_flags`
val append_flags : open_flags
declare ocaml target_rep function append_flags = `System.append_flags`

val flags_of_redir_type : forall 'a. os_state 'a -> redir_type -> open_flags
let flags_of_redir_type s0 rt =
  match rt with
  | To -> if Set.member Sh_noclobber s0.sh.opts then to_flags else clobber_flags
  | Clobber -> clobber_flags
  | From -> from_flags
  | FromTo -> fromto_flags
  | Append -> append_flags
  end

val real_open : string -> open_flags -> either string fd
declare ocaml target_rep function real_open = `System.real_open`

val real_close : fd -> unit
declare ocaml target_rep function real_close = `System.real_close`

val real_savefd : fd -> either string fd
declare ocaml target_rep function real_savefd = `System.real_savefd`

val real_dup2 : fd -> fd -> maybe string
declare ocaml target_rep function real_dup2 = `System.real_dup2`

val real_openhere : string -> either string fd
declare ocaml target_rep function real_openhere = `System.real_openhere`

let real_close_and_save_fd os fd =
  match real_savefd fd with
  | Left err -> Left err
  | Right saved_fd ->
     let () = real_close fd in
     Right (os, [(fd,Saved saved_fd)])
  end

let real_renumber_fd os (close : bool) (new_fd : fd) (wanted_fd : fd) =
  if new_fd = wanted_fd
  then 
    (* we fished our wish! no need to dup or anything.
       just remember to clean up when you're done *)
    Right (os, if close then [(wanted_fd,Close)] else [])
    else (* need to save wanted_fd and then dup *)
      match real_savefd wanted_fd with
      | Left err -> Left err
      | Right saved_fd -> 
         match real_dup2 new_fd wanted_fd with
         | Just err -> Left err
         | Nothing -> 
            (* close the actual fd we got, now that we've
               relocated it where we want it *)
            let () = if close then real_close new_fd else () in
            Right (os, [(wanted_fd, Saved saved_fd)])
         end
      end

instance (OS unit)
  let getpwnam _os nam = real_getpwnam nam
                       
  let execve os prog argv env =
    (os, real_execve (force_concrete prog) (map force_concrete argv) (environ env))

  let fork_and_subshell os stmt =
    let (subsh,handlers) = clear_traps_for_subshell os.sh in
    (* When a subshell is entered, traps that are not being ignored
       shall be set to the default actions, except in the case of a
       command substitution containing only a single trap command,
       when the traps need not be altered. Implementations may check
       for this case using only lexical analysis; for example, if
       `trap` and $( trap -- ) do not alter the traps in the subshell,
       cases such as assigning var=trap and then using $($var) may
       still alter them. This does not imply that the trap command
       cannot be used within the subshell to set new traps.  *) 
    let pid = 
      real_fork_and_eval 
        (List.map ocaml_signal_of_signal handlers) (* ignore these signals! *)
        (<| os with sh = subsh |>) (* update the traps *)
        stmt in
    (os, pid)

  let physical_cwd _os = real_physical_cwd ()

  let chdir os path =
    match real_chdir path with
    | Nothing -> (<| os with sh = <| os.sh with cwd = path |> |>, Nothing)
    | Just err -> (os, Just err)
    end
      
  let file_exists _os path = real_exists path
  let isdir _os path = real_isdir path
  let isexec _os path = real_isexec path

  let readdir _os path = 
    let contents = real_readdir path in
    let convert (f,is_dir) = (f,if is_dir then Dir () else File) in
    Set.fromList (map convert contents)

  let write_fd os fd s =
    if real_write_fd fd s
    then Just os
    else Nothing

  let read_fd os fd =
    match real_read_fd fd with
    | Nothing -> Nothing
    | Just s -> Just (os,s)
    end

  let close_fd os fd =
    let () = real_close fd in
    os

  let pipe os =
    let (fd_read, fd_write) = real_pipe () in
    (os, fd_read, fd_write)

  let exit os =
    let ec = 
      match Map.lookup "?" os.sh.env with
      | Nothing -> 127
      | Just ss -> 
         match try_concrete ss with
         | Nothing -> 128
         | Just s -> 
            match readNat (toCharList s) with
            | Right n -> n
            | Left _err -> 2
            end
         end
      end in
    real_exit ec

  let waitpid _step_eval os pid =
    let code = real_waitpid pid in
    (os, Just (Right code))

  let handle_signal os0 signal action =
    let s1 = update_trap os0 signal action in
    let actual_action =
      match action with
      | Nothing -> Nothing
      | Just ss -> Just (string_of_symbolic_string ss)
      end
    in
    let _ = real_handle_signal (ocaml_signal_of_signal signal) actual_action in
    s1

  let times _os = real_times ()

  let get_umask _os = 
    let umask = real_get_umask () in
    perms_of_nat umask

  let set_umask os mask = 
    let _ = real_set_umask (nat_of_perms mask) in
    os

  let open_file_for_redir os ty sfile =
    let flags = flags_of_redir_type os ty in
    match real_open (force_concrete sfile) flags with
    | Left err -> Left err
    | Right new_fd -> Right (os,new_fd)
    end
   
  let open_heredoc os s =
    match real_openhere s with
    | Left err -> Left err
    | Right fd -> Right (os, fd)
    end

  let close_and_save_fd = real_close_and_save_fd

  let renumber_fd = real_renumber_fd

  let restore_fd os orig_fd info =
    let to_close = 
      match info with
      | Saved saved -> 
         match real_dup2 saved orig_fd with
         | Just _err -> saved (* TODO 2018-08-24 uh oh... signal in some way? *)
         | Nothing -> saved
         end
      | Close -> 
         orig_fd
      end
    in
    let _ = real_close to_close in
    os    

end

val real_set_sh_opt : os_state system -> sh_opt -> os_state system
let real_set_sh_opt os opt = set_sh_opt os opt
