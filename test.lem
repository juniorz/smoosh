open import Pervasives_extra
open import Expansion

type result = Ok | RErr of string * words * words

val check_expansion :
  string * ty_os_state * words * words ->
  result
let check_expansion (test_name, s0, w_in, w_expected) =
  (let (s1, w_out) = fully_expand_words s0 Unquoted w_in in
  if w_out = w_expected
  then Ok
  else RErr test_name w_expected w_out)

let os_empty = <|
    shell_env = Map.empty;
  |>

let os_var_x_set = <| os_empty with shell_env = Map.insert "x" "bar" os_empty.shell_env |>
let os_var_x_null = <| os_empty with shell_env = Map.insert "x" "" os_empty.shell_env |>

(*<| s0 with shell_env = fmap_update s0.shell_env (s,str) |>o
 *    | Default w  -> w
      | NDefault w  -> w
      | Assign w -> [K (LAssign str Nothing w)]
      | NAssign w  -> [K (LAssign str Nothing w)]
      | Error _    -> [S "error"] (* This should error *)
      | NError _    -> [S "error"] (* This should error *)
      | Length     -> [S ("0")]
      | _          -> [S ("")] (* null *)
 * *)

(* TODO: tests for variable assignment (will have to check ending state as well) *)
val expansion_tests :
  list (string * ty_os_state * words * words)
let expansion_tests =
  [
    ("plain string foo", os_empty, [S "foo"], [S "foo"]);
    ("expand tilde without username", <| os_empty with shell_env = Map.insert "HOME" "/home/testuser" os_empty.shell_env |>, [K Tilde], [S "/home/testuser"]);
    ("normal paramater lookup of unset variable", os_empty, [K (Param "x" Normal)], [S ""]);
    ("paramter length of unset variable", os_empty, [K (Param "x" Length)], [S "0"]);

    ("ndefault parameter lookup on variable set to null replaces word", os_var_x_null, [K (Param "x" (NDefault [S "foo"]))], [S "foo"]);
    ("default parameter lookup on variable set to null is null", os_var_x_null, [K (Param "x" (Default [S "foo"]))], [S ""]);

    ("paramter length of set variable is the length of the string", os_var_x_set,  [K (Param "x" Length)], [S "3"]);
    ("parameter lookup on set variable returns the variable's value", os_var_x_set,[K (Param "x" (Default [S "foo"]))], [S "bar"]);
    ("alternate parameter lookup on set variable does not return the variable's value", os_var_x_set, [K (Param "x" (Alt [S "foo"]))], [S "foo"]);

    (* ${x=${x=foo}bar${x=baz}}
     * should return foobarfoo
     * x is set to foobarfoo at the end *)
    ("Nested assignment statements", os_empty,
      [K (Param "x" (Assign [K (Param "x" (Assign [S "foo"])); S "bar"; K (Param "x" (Assign [S "baz"]))]))], [S "foo"; S "bar"; S "foo"]);

    (* ${y=${x:+foo}rab${x+oof}}
     * should return raboof
     * y is set to raboof and x is null at the end *)
    ("Alternate parameter lookups on a variable set to null", os_var_x_null,
      [K (Param "y" (Assign [K (Param "x" (NAlt [S "foo"])); S "rab"; K (Param "x" (Alt [S "oof"]))]))], [S ""; S "rab"; S "oof"]);

    (* ${x:-foo}bar${x-baz}
     * should return foobar
     * x is null at the end *)
    ("Default parameter lookups on a variable set to null", os_var_x_null,
      [K (Param "x" (NDefault [S "foo"])); S "bar"; K (Param "x" (Default [S "baz"]))], [S "foo"; S "bar"; S ""]);

  ]
