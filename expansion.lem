open import Pervasives_extra
open import Fsh_prelude
open import Arith

(*
Strings will be whatever lem uses for string
??? What character set does lem use for strings? Does it matter?
*)

type expanded_word =
   ExpF
 | ExpS of string
 | ExpDQ of string
 | UsrS of string
 | UsrDQ of string

type expanded_words = list expanded_word

type fields = list string

type string_mode =
    UserString
  | GeneratedString

type quoting_mode =
    Unquoted
  | Quoted

type format =
    Normal
  | Default of words
  | NDefault of words
  | Assign of words
  | NAssign of words
  | Error of words
  | NError of words
  | Alt of words
  | NAlt of words
  | Length
  | ShortestPrefix of words
  | LongestPrefix of words
  | ShortestSuffix of words
  | LongestSuffix of words

(* Treating parameters niavely led to a problem when evaluating
 * ${x=${x=foo}bar${x=baz}} incorrectly when x was unset
 *)
and control =
    Tilde
  | TildeUser of string
  | Param of string * format
  | LAssign of string * expanded_words * words
  | Backtick of words
  | Arith of words
  | Quote of words

and entry =
    S of string
  | DQ of string
  | K of control
  | F

and words = list entry

  (* Left is what has been parsed, right is unparsed *)
and expansion_state = words * words

val string_of_words : words -> string
val string_of_entry : entry -> string

let rec string_of_words w = List.foldr (^) "" (List.map string_of_entry w)
and string_of_entry e =
  match e with
  | S str -> "S(" ^ str ^ ")"
  | DQ string -> "\"" ^ string ^ "\""
  | K _ -> "<<CTRL>>"
  | F -> "<<FS>>"
  end

(*
 * Stage 1 Expansion: Word expansion
 *)

val concat_expanded : expanded_words -> string

val expand_param : ty_os_state -> quoting_mode -> string -> format -> words
val expand_control : ty_os_state -> quoting_mode -> control -> (ty_os_state * expanded_words * words)
val expand_words : ty_os_state -> quoting_mode -> string_mode -> (expanded_words * words) -> (ty_os_state * expanded_words * words)
val control_code_expansion : ty_os_state -> quoting_mode -> words -> (ty_os_state * expanded_words)

let rec concat_expanded w =
  match w with
  | [] -> ""
  | (ExpF::ws) -> " " ^ concat_expanded ws
  | (ExpS(s)::ws) -> s ^ concat_expanded ws
  | (ExpDQ(s)::ws) -> s ^ concat_expanded ws
  end

let rec expand_param s0 q str f =
  (let value = lookup_param s0 str in
  (match value with
    | Nothing -> (match f with
      | Default w  -> w
      | NDefault w  -> w
      | Assign w -> [K (LAssign str [] w)]
      | NAssign w  -> [K (LAssign str [] w)]
      | Error _    -> [S "error"] (* This should error *)
      | NError _    -> [S "error"] (* This should error *)
      | Length     -> [S ("0")]
      | _          -> [S ("")] (* null *)
      end)
    | Just "" -> (match f with
      | NDefault w -> w
      | Alt w      -> w
      | NError _    -> [S "error"] (* This should error *)
      | Length     -> [S ("0")]
      | _          -> [S ("")] (* null *)
      end)
    | Just v -> (match f with
      | Alt w  -> w
      | NAlt w -> w
      | Length -> [S (show (stringLength v))]
      | _      -> [S (v)]
      end)
  end))

and expand_control s0 q k =
  match k with
    | Tilde -> (s0, [], expand_param s0 Unquoted "HOME" Normal)
    | TildeUser usr -> (s0, [], [S "error"]) (* This should call system *)
    | Param s f -> expand_words s0 q GeneratedString ([], expand_param s0 q s f)
    | LAssign s f [] ->
        let s1 = <| s0 with shell_env = Map.insert s (concat_expanded f) s0.shell_env |> in
        (s1, f, [])
    | LAssign s f w ->
        let (s1, f1, w1) = expand_words s0 q GeneratedString ([], w) in
        (s1, [], [K (LAssign s (f ++ f1) w1)])
    | Backtick w -> (s0, [], [S "error"]) (* This should create a new bash env *)
    | Arith w -> let (s1, f1, w1) = expand_words s0 q GeneratedString ([],w) in
        (s1, [], [K (Arith w1)])
    | Quote w -> let (s1, f1, w1) = expand_words s0 Quoted GeneratedString ([],w) in
        match w1 with
        | [] -> (s1, f1, [])
        | _ -> (s1, f1, [K (Quote (w1))])
        end
    (*| Nested (q, st) -> [K (Nested (q, expand_words *)
  end

and expand_words s0 q sm (f,w) =
  match w with
    | [] -> (s0, f, w)
    | (F::ws) -> (s0, f ++ [ExpF], ws)
    | (S(s)::ws) ->
        let f1 = match (q, sm) with
        | (Quoted, UserString) -> [UsrDQ s]
        | (Quoted, GenerateString) -> [ExpDQ s]
        | (Unquoted, UserString) -> [UsrS s]
        | (Unquoted, GenerateString) -> [ExpS s]
        end in
        (s0, f ++ f1, ws)

    | (DQ(s)::ws) ->
        let f1 = match sm with
        | UserString -> [UsrDQ s]
        | GenerateString -> [ExpDQ s]
        end in
        (s0, f ++ f1, ws)
    | (K(k)::ws) -> let (s1,f1,w1) = expand_control s0 q k in
        (s1, f++f1, (w1 ++ ws))
  end

and control_code_expansion s0 q w =
  let (s1, f1, w1) = expand_words s0 q UserString ([],w) in
  match w1 with
  | [] -> (s1, f1)
  | _ -> let (s2, f2) = control_code_expansion s1 q w1 in
                        (s2, (f1 ++ f2))
  end

(*
 * Stage 2 Expansion: Field Splitting
 *)

type tmp_field =
    WFS
  | FS
  | Field of string
  | QField of string

type intermediate_fields = list tmp_field

val is_whitespace : char -> bool
val collect_non_ifs : list char -> list char -> (list char) * (list char)
(*val collect_ifs_whitespace : list char -> list char -> list char*)
val split_string : list char -> list char -> intermediate_fields
val split_word : list char -> (intermediate_fields * expanded_words) -> (intermediate_fields * expanded_words)
val split_fields : ty_os_state -> expanded_words -> intermediate_fields
val clean_fields : intermediate_fields -> intermediate_fields
val field_splitting: ty_os_state -> expanded_words -> intermediate_fields

let is_whitespace c = elem c (toCharList " \n\t")

let rec collect_non_ifs ifs ls =
  match ls with
  | [] -> ([], [])
  | (c::cs) ->
      if elem c ifs
      then ([], c::cs)
      else let (f, remaining) = collect_non_ifs ifs cs in
           (c::f, remaining)
  end

let rec split_string ifs clst =
   match clst with
   | [] -> []
   | c::cs ->
       if elem c ifs
       then let fs = if is_whitespace c then WFS else FS in fs::split_string ifs cs
       else let (cc, cs1) = (collect_non_ifs ifs cs) in (Field (toString (c::cc)))::(split_string ifs cs1)
  end

let rec split_word ifs p =
  match p with
  | (f, []) -> (f, [])
  | (f, ExpF::wrds) -> split_word ifs (f ++ [FS], wrds)
  | (f, ExpS(s)::wrds) ->
      let new_fields = split_string ifs (toCharList s) in
      split_word ifs (f ++ new_fields, wrds)
  | (f, ExpDQ(s)::wrds) -> split_word ifs (f ++ [QField s], wrds)
  | (f, UsrS(s)::wrds) -> split_word ifs (f ++ [Field s], wrds)
  | (f, UsrDQ(s)::wrds) -> split_word ifs (f ++ [QField s], wrds)
  end

let split_fields s0 exp_words =
  let ifs = lookup_param s0 "IFS" in
  let (f, _) = match ifs with
    | Nothing -> split_word (toCharList " \n\t") ([], exp_words)
    | Just "" -> ([Field (concat_expanded exp_words)], [])
    | Just s -> split_word (toCharList s) ([], exp_words)
  end in f

let rec combine_fields f =
  match f with
  | [] -> []
  | [WFS] -> [] (* Remove trailing field separators *)
  | (WFS::WFS::rst) -> combine_fields (WFS::rst) (* Combine adjacent whitespace separators *)
  | (WFS::FS::rst) -> combine_fields (FS::rst)
  | (FS::WFS::rst) -> combine_fields (FS::rst)
  | (Field(s1)::Field(s2)::rst) -> combine_fields (Field(s1 ^ s2)::rst)
  | (WFS::rst) -> FS::(combine_fields rst)
  | (f::rst) -> f::(combine_fields rst)
  end

let rec clean_fields f =
  match f with
  | (WFS::rst) -> clean_fields rst
  | _ -> combine_fields f
  end

let field_splitting s0 w = clean_fields (split_fields s0 w)

(*
 * Stage 3 Expansion: Pathname expansion
 *)

val pathname_expansion : ty_os_state -> intermediate_fields -> intermediate_fields

(* Parameter expansion only happens on unquoted fields *)
let rec pathname_expansion s0 f =
  match f with
  | [] -> []
  | (Field(s)::rst) -> ([Field s]) ++ (pathname_expansion s0 rst)
  | (f::rst) -> f::(pathname_expansion s0 rst)
  end

(*
 * Stage 4 Expansion: Quote Removal
 *)

val remove_quotes : intermediate_fields -> intermediate_fields
val to_fields : intermediate_fields -> fields
val finalize_fields : intermediate_fields -> fields
val quote_removal : ty_os_state -> intermediate_fields -> fields

let rec remove_quotes f =
  match f with
  | [] -> []
  | (QField(s)::rst) -> Field(s)::(remove_quotes rst)
  | (f::rst) -> f::(remove_quotes rst)
  end

let rec to_fields f =
  match f with
  | [] -> []
  | FS::FS::rst -> ""::(to_fields rst)
  | Field(s)::rst -> s::(to_fields rst)
  | FS::rst -> to_fields rst
  end

let rec finalize_fields f =
  match f with
  | (FS::rst) -> ""::(finalize_fields rst)
  | _ -> to_fields f
  end

let quote_removal s0 f =
  let no_quotes = combine_fields (remove_quotes f) in
  finalize_fields no_quotes

(*
 * Run a full expansion on the given words
 *)

val full_expansion : ty_os_state -> words -> ty_os_state * fields
let full_expansion s0 w_in =
  let (s1, f1_out) = control_code_expansion s0 Unquoted w_in in
  let f2_out = field_splitting s1 f1_out in
  let f3_out = pathname_expansion s1 f2_out in
  let f4_out = quote_removal s1 f3_out in
  (s1, f4_out)

