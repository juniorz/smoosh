open import Fsh_prelude

val STDIN : nat
val STDOUT : nat
val STDERR : nat
let STDIN = 0
let STDOUT = 1
let STDERR = 2

(**********************************************************************)
(* FS/OS CLASS ********************************************************)
(**********************************************************************)

(* TODO 2018-08-14 file contents? will allow for use of, e.g., /etc/passwd *)           
type file 'a = File | Dir of 'a

type path = string

(* data structures for managing redirections (will translate to close/dup2/pipe calls) *)
type fd_tgt = FD of nat | Path of path
(* TODO 2018-08-14 needs to be a list, since order matters! 
   perhaps use a stack-based approach, like dash does?
 *)
type fds = Map.map fd fd_tgt

val path_dotdot_rev_cl : list char -> list char
let rec path_dotdot_rev_cl path =
  match path with
  | [] -> [#'/'] (* stop at the root *)
  | #'/'::rest -> rest
  | _::rest -> path_dotdot_rev_cl rest
  end
                            
val dotdot : path -> path
let dotdot path = toString (reverse (path_dotdot_rev_cl (reverse (toCharList path))))

class ( OS 'a )
  val get_shell_state : 'a -> ty_shell_state
  val set_shell_state : ty_shell_state -> 'a -> 'a

  (* SYSTEM CALLS *)
  val getpwnam : 'a -> string -> maybe string
  val fork_and_execve : 'a -> symbolic_string -> list symbolic_string -> env -> fds -> 'a * nat
  val fork_and_subshell : 
    (* need to be passed eval to close the recursive knot for the real OS *)
    ('a -> stmt -> nat) ->
    'a -> stmt -> fds -> 'a * nat
  val waitpid : 
    (* need to be passed step_eval to close recursive knot for the symbolic OS *)
    ('a -> stmt -> either (evaluation_step * 'a) (evaluation_step * 'a * stmt)) ->
    'a -> nat -> 'a * maybe (either evaluation_step nat)

  (* FS CALLS *)
  val chdir : 'a -> path -> 'a * maybe string
  val readdir : 'a -> path -> set (path * file unit)
  val write_fd : 'a -> fd -> string -> maybe 'a
  val read_fd : 'a -> fd -> maybe ('a * string)
end

val try_write_fd : forall 'a. OS 'a => fd -> string -> 'a -> 'a
let try_write_fd fd s os =
  (* TODO 2018-03-02 is this the right behavior when an fd points to a bad fifo, e.g., STDERR is closed? *)
  match write_fd os fd s with
  | Just os' -> os'
  | Nothing -> os
  end
   
val write_stdout : forall 'a. OS 'a => string -> 'a -> 'a
let write_stdout = try_write_fd STDOUT

val write_stderr : forall 'a. OS 'a => string -> 'a -> 'a
let write_stderr = try_write_fd STDERR

val first_is_slash : path -> bool
let first_is_slash path = 
  path <> "" && nth path 0 = #'/'

val last_is_slash : path -> bool
let last_is_slash path = 
  path <> "" && nth path (stringLength path - 1) = #'/'

val canonicalize_path : forall 'a. OS 'a => 'a -> path -> path 
let canonicalize_path _os path = path (* TODO 2018-08-15 implement *)

(**********************************************************************)
(* SYMBOLIC FS STATE **************************************************)
(**********************************************************************)

(* Broadly, directories map to contents, which are dir trees or files.
 * For now, fine, just using for pathname expansion.
 *
 * TODO: Ultimately, rely on SibylFS's detailed model *)
type symbolic_fs = <|
  parent: maybe symbolic_fs;
  contents: Map.map string (file symbolic_fs)
|>

type fs = symbolic_fs (* shim *)

let symbolic_fs_dotdot fs =
  match fs.parent with
  | Nothing -> fs
  | Just fs' -> fs'
  end

let symbolic_fs_subdir fs name = 
  match Map.lookup name fs.contents with
  | Just (Dir fs) -> Just fs
  | _ -> Nothing
  end
   
val symbolic_fs_resolve_path_cl : symbolic_fs -> list char -> symbolic_fs
let rec symbolic_fs_resolve_path_cl fs cs =
  (* just quit if we're done *)
  if null cs then fs else
  (* otherwise, split off a slash *)
  let (dir,slash_rest) = splitWhile (fun c -> c <> #'/') cs in
  let rest = 
    match slash_rest with
    | #'/'::rest -> rest
    | _ -> slash_rest
    end in
  (* and try to change directories *)
  match dir with
  | [] -> symbolic_fs_resolve_path_cl fs rest
  | [#'.'] -> symbolic_fs_resolve_path_cl fs rest
  | [#'.';#'.']-> symbolic_fs_resolve_path_cl (symbolic_fs_dotdot fs) rest
  | _ -> 
     match symbolic_fs_subdir fs (toString dir) with
     | Just fs' -> symbolic_fs_resolve_path_cl fs' rest
     | _ -> fs (* ??? *)
     end
  end

val symbolic_fs_resolve_path : symbolic_fs -> string -> symbolic_fs
let symbolic_fs_resolve_path fs path = symbolic_fs_resolve_path_cl fs (toCharList path)  

(* empty FS/OS for testing purposes *)    
let fs_empty =
  <| parent = Nothing;
     contents = Map.empty
  |>

(**********************************************************************)
(* SYMBOLIC OS STATE **************************************************)
(**********************************************************************)

(* FIFO pipes for symbolic FDs *)             
type fifo = string
          
and proc =
    Execve of symbolic_string (* command *) * list symbolic_string (* args *) * env * fds
  | Shell of stmt * ty_shell_state * fds
  | Zombie of nat (* exit code *)

and symbolic_os_state = <|
    symbolic_passwd: Map.map string string; (* TODO relate to /etc/passwd, emulate getpwnam properly in getpwdir *)
    symbolic_sh: ty_shell_state;
    symbolic_sh_fds: fds;
    symbolic_fs_root: fs;
    symbolic_fifos: list fifo;
    symbolic_procs: list proc
  |>

(* INVARIANT: the second number here is referring to the indices in os_empty.fifos below *)
let fds_default : fds = Map.insert STDIN (FD 0) (Map.insert STDOUT (FD 1) (Map.insert STDERR (FD 2) Map.empty))
    
let os_empty : symbolic_os_state = <|
    symbolic_sh = default_shell_state;
    symbolic_sh_fds = fds_default;
    symbolic_passwd = Map.empty;
    symbolic_fs_root = fs_empty;
    symbolic_fifos = ["" (* STDIN *)
                     ;"" (* STDOUT *)
                     ;"" (* STDERR *)
                     ];
    symbolic_procs = []
 |>

(**********************************************************************)
(* SHELL/OS STATE FUNCTIONS *******************************************)
(**********************************************************************)
   
val print_shell_env : forall 'a. OS 'a => 'a -> string
let print_shell_env os = Map_extra.fold (fun k v s -> k ^ " => " ^ string_of_symbolic_string v ^ ", " ^ s) (get_shell_state os).env ""

val lookup_positional_param : forall 'a. OS 'a => nat -> 'a -> maybe symbolic_string
let lookup_positional_param num os =
  let sh = get_shell_state os in
  if num = 0
  then Just (symbolic_string_of_string sh.script_name)
  (* -1 for positional param offset (ie, $0 is stored elsewhere *)
  else index sh.positional_params (num - 1)

(* The result is nothing if the parameter is unset, and the empty string null. *)
val lookup_param : forall 'a. OS 'a => 'a -> string -> maybe symbolic_string
let lookup_param os str =
  let sh = get_shell_state os in
  match (readNat (toCharList str),str) with
  | (Right num,_) -> lookup_positional_param num os
  | (Left _,"@") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* positional arguments as fields *)
  | (Left _,"*") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* positional arguments as a string *)
  | (Left _,"#") -> Just (symbolic_string_of_string (stringFromNat (length sh.positional_params))) (* number of positional arguments *)
  | (Left _,"!") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* last bg pid *)
  | (Left _,"-") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* current option flags *)
  | (Left _,"$") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* shell pid *)
  | (Left _,_) -> Map.lookup str sh.env
  end

val lookup_concrete_param : forall 'a. OS 'a => 'a -> string -> maybe string
let lookup_concrete_param os str =
  match lookup_param os str with
  | Nothing -> Nothing
  | Just fs -> try_concrete fs
  end

val update_shell_state : forall 'a. OS 'a => (ty_shell_state -> ty_shell_state) -> 'a -> 'a
let update_shell_state update os =
  set_shell_state (update (get_shell_state os)) os
   
val defun : forall 'a. OS 'a => string -> stmt -> 'a -> 'a
let defun name body os = update_shell_state (fun sh -> <| sh with funcs = Map.insert name body sh.funcs |>) os

val lookup_function : forall 'a. OS 'a => string -> 'a -> maybe stmt
let lookup_function name os = Map.lookup name (get_shell_state os).funcs

val set_param : forall 'a. OS 'a => string -> symbolic_string -> 'a -> 'a
let set_param x v os = update_shell_state (fun sh -> <| sh with env = Map.insert x v sh.env |>) os
  
val set_function_params : forall 'a. OS 'a => nat -> fields -> 'a -> 'a
let set_function_params ln argv os =
  update_shell_state (fun sh -> <| sh with loop_nest = ln; positional_params = argv |>) os

val get_script_name : forall 'a. OS 'a => 'a -> string
let get_script_name os = (get_shell_state os).script_name

val enter_loop : forall 'a. OS 'a => 'a -> 'a
let enter_loop os = 
  update_shell_state
    (fun sh -> <| sh with loop_nest = sh.loop_nest + 1 |>) os

val exit_loop : forall 'a. OS 'a => 'a -> 'a
let exit_loop os = 
  update_shell_state
    (fun sh -> <| sh with loop_nest = sh.loop_nest - 1 |>) os

val exit_with : forall 'a. OS 'a => nat -> 'a -> 'a
let exit_with ec os = set_param "?" (symbolic_string_of_string (stringFromNat ec)) os

val get_last_exit_code : forall 'a. OS 'a => 'a -> maybe nat
let get_last_exit_code os =
  match lookup_concrete_param os "?" with
  | Nothing -> Nothing
  | Just s -> 
     match readNat (toCharList s) with
     | Right n -> Just n
     | Left _err -> Nothing
     end
  end

val set_last_pid : forall 'a. OS 'a => nat -> 'a -> 'a
let set_last_pid pid os = set_param "!" (symbolic_string_of_string (stringFromNat pid)) os
  
(***********************************************************************)
(* UNCONVERTED *********************************************************)

val adjust_nth : forall 'a 'b. list 'a -> nat -> ('a -> 'a * 'b) -> maybe (list 'a * 'b)
let rec adjust_nth l n f =
  match (l,n) with
  | ([],_) -> Nothing
  | (v::l',0) -> 
     let (v',res) = f v in
     Just (v'::l',res)
  | (v::l',_) ->
     match adjust_nth l' (n-1) f with
     | Nothing -> Nothing
     | Just (l'',res) -> Just (v::l'',res)
     end
  end
  
(**********************************************************************)
(* SYMBOLIC OS STATE INSTANCE *****************************************)
(**********************************************************************)

val compare_by_first : forall 'a 'b. Ord 'a => ('a * 'b) -> ('a * 'b) -> ordering
let compare_by_first (a, _) (a', _) = compare a a'

val symbolic_resolve_fd : symbolic_os_state -> fd -> maybe nat
let symbolic_resolve_fd os fd =
  match Map.lookup fd os.symbolic_sh_fds with
  | Just (FD fifo_num) -> Just fifo_num
  (* TODO 2018-03-23 is this the right behavior when fd points to a file? *)   
  (* TODO 2018-03-02 is this the right behavior when fd doesn't exist? *)
  | _ -> Nothing
  end
    
instance (OS symbolic_os_state)
   
  let get_shell_state os = os.symbolic_sh
  let set_shell_state new_sh os = <| os with symbolic_sh = new_sh |>
  let getpwnam os u = Map.lookup u os.symbolic_passwd

  let fork_and_execve os prog argv env fds =
    (* TODO 2018-02-09 choose valid process numbers (e.g., 0 and 1 are reserved on Linux) *)
    let proc_num = length os.symbolic_procs in
    (<| os with symbolic_procs = os.symbolic_procs ++ [Execve prog argv env fds] |>, 
     proc_num)

  let fork_and_subshell _eval os stmt fds =
    let proc_num = length os.symbolic_procs in
    (<| os with symbolic_procs = os.symbolic_procs ++ [Shell stmt os.symbolic_sh fds] |>, 
     proc_num)

  let waitpid step_eval os0 pid =
    match index os0.symbolic_procs pid with
    | Nothing -> (os0, Nothing)
    | Just (Execve _ _ _ _) -> (os0, Nothing)
    | Just (Zombie ec) -> (os0, Just (Right ec))
    | Just (Shell stmt sh' fds') ->
       let os1 = <| os0 with symbolic_sh = sh'; symbolic_sh_fds = fds' |> in
       match step_eval os1 stmt with
       | Left (_step, os2) -> (os2, Just (Right 1)) (* errored, signal with code *)
       | Right (_step, os2, Done) ->
          (* terminated! grab the code, update everything *)
          let ec = (* can't use get_last_exit_code because we're DEFINING the type class *)
            match Map.lookup "?" os2.symbolic_sh.env with
            | Nothing -> 255
            | Just ss -> 
               match try_concrete ss with
               | Nothing -> 255
               | Just s -> 
                  match readNat (toCharList s) with
                  | Right n -> n
                  | Left _err -> 255
                  end
               end
            end in
          (<| os2 with symbolic_sh = os0.symbolic_sh; 
                       symbolic_sh_fds = os0.symbolic_sh_fds;
                       symbolic_procs = update os2.symbolic_procs pid (Zombie ec) |>,
           Just (Right ec))
       | Right (step, os2, stmt') ->
          (<| os2 with symbolic_sh = os0.symbolic_sh; 
                       symbolic_sh_fds = os0.symbolic_sh_fds;
                       symbolic_procs = 
                         update os2.symbolic_procs pid 
                           (Shell stmt' os2.symbolic_sh os2.symbolic_sh_fds) |>,
           Just (Left step))
       end
    end
                                   
  let readdir os path =
    Set.map (fun (name,file) ->
        (name,
         match file with
         | File -> File
         | Dir _ -> Dir ()
         end))
      (* Only compare equality for the set based on the keys.
       * Comparing equality of a non-trivial file system will loop infinitely. *)
      (toSetBy compare_by_first (symbolic_fs_resolve_path os.symbolic_fs_root path).contents)

  let chdir os path =
    (* TODO 2018-08-15 try to resolve path, give an error if no dice *)
    (<| os with symbolic_sh = <| os.symbolic_sh with cwd = path |> |>, Nothing)

  let write_fd os fd s =
    match symbolic_resolve_fd os fd with
    | Just fifo_num ->
      match adjust_nth os.symbolic_fifos fifo_num (fun fifo_cts -> (fifo_cts ^ s, ())) with
      | Nothing -> Nothing
      | Just (new_fifos,()) -> Just <| os with symbolic_fifos = new_fifos |>
      end
    | Nothing -> Nothing
    end
  
  let read_fd os fd =
    match symbolic_resolve_fd os fd with
    | Just fifo_num ->
      match adjust_nth os.symbolic_fifos fifo_num (fun fifo_cts -> ("",fifo_cts)) with
      | Nothing -> Nothing
      | Just (new_fifos,s) -> Just (<| os with symbolic_fifos = new_fifos |>, s)
      end
    | Nothing -> Nothing
  end

end

val set_pwdir : string -> string -> symbolic_os_state -> symbolic_os_state
let set_pwdir u d os = <| os with symbolic_passwd = Map.insert u d (os.symbolic_passwd) |>

val mkfifo : symbolic_os_state -> symbolic_os_state * nat  
let mkfifo os =
  let fifo_num = length os.symbolic_fifos in
  (<| os with symbolic_fifos = os.symbolic_fifos ++ [""] |>, fifo_num)

val mkfifos : symbolic_os_state -> nat -> symbolic_os_state * list nat 
let rec mkfifos os0 n =
  match n with
  | 0 -> (os0, [])
  | _ -> let (os1,fifo) = mkfifo os0 in 
         let (os2,fifos) = mkfifos os1 (n-1) in
         (os2,fifo::fifos)
  end
   
(* specialized functions to avoid manual instantiation of typeclasses in OCaml *)   
val symbolic_set_param : string -> symbolic_string -> symbolic_os_state -> symbolic_os_state
let symbolic_set_param = set_param

val symbolic_print_shell_env : symbolic_os_state -> string
let symbolic_print_shell_env os = print_shell_env os

(**********************************************************************)
(* REAL OS STATE INSTANCE *********************************************)
(**********************************************************************)

type real_os_state = <|
    real_sh: ty_shell_state;
    real_sh_fds: fds;
  |>

let force_concrete ss =
  match try_concrete ss with
  | Just s -> s
  | Nothing -> 
     failwith ("Couldn't convert symbolic string, aborting:\n\n" ^ string_of_symbolic_string ss)
  end

(* generate an 'environ'-style string given an env *)
let environ (env : env) : list string =
  Map_extra.fold (fun x v l -> (x ^ "=" ^ force_concrete v) :: l) env []

val real_getpwnam : string -> maybe string
declare ocaml target_rep function real_getpwnam = `System.real_getpwnam`

val real_fork_and_execve : string -> list string -> list string -> nat
declare ocaml target_rep function real_fork_and_execve = `System.real_fork_and_execve`

val real_fork_and_call : forall 'a 'b. ('a -> 'b) -> 'a -> nat
declare ocaml target_rep function real_fork_and_call = `System.real_fork_and_call`

val real_waitpid : nat -> nat
declare ocaml target_rep function real_waitpid = `System.real_waitpid`

val real_chdir : path -> maybe string
declare ocaml target_rep function real_chdir = `System.real_chdir`

val real_readdir : string -> list (string * bool)
declare ocaml target_rep function real_readdir = `System.real_readdir`

val real_write_fd : nat -> string -> bool
declare ocaml target_rep function real_write_fd = `System.real_write_fd`

val real_read_fd : nat -> maybe string
declare ocaml target_rep function real_read_fd = `System.real_read_fd`
    
instance (OS real_os_state)
  let get_shell_state os = os.real_sh
  let set_shell_state new_sh os = <| os with real_sh = new_sh |>

  let getpwnam _os nam = real_getpwnam nam

  let fork_and_execve os prog argv env fds = 
    let pid = 
      real_fork_and_execve 
        (force_concrete prog)
        (map force_concrete argv) 
        (environ env) 
        (* need fds or some other solution; see note in system.ml *)
        in
    (os, pid)

  let fork_and_subshell eval os stmt fds =
    let pid = 
      real_fork_and_call (fun (os,stmt) -> eval os stmt) (os,stmt)
      (* need fds or some other solution; see not in system.ml *)
      in
    (os, pid)

  let chdir os path =
    (<| os with real_sh = <| os.real_sh with cwd = path |> |>, real_chdir path)
      
  let readdir _os path = 
    let contents = real_readdir path in
    let convert (f,is_dir) = (f,if is_dir then Dir () else File) in
    Set.fromList (map convert contents)

  let write_fd os fd s =
    if real_write_fd fd s
    then Just os
    else Nothing

  let read_fd os fd =
    match real_read_fd fd with
    | Nothing -> Nothing
    | Just s -> Just (os,s)
    end

  let waitpid _step_eval os pid =
    let code = real_waitpid pid in
    (os,Just (Right code))
end

val real_lookup_concrete_param : real_os_state -> string -> maybe string
let real_lookup_concrete_param = lookup_concrete_param
