open import Pervasives_extra
open import Fsh_num

(*
Strings will be whatever lem uses for string
??? What character set does lem use for strings? Does it matter?
*)

(**********************************************************************)
(* LOCALES ************************************************************)
(**********************************************************************)

type range_char = 
    RChar of char
  | RCollating of string

type locale = 
  <| name : string ;
     collates : char -> string -> bool ; 
     equiv : char -> string -> bool ; 
     charclass : char -> string -> bool ; 
     range : char -> range_char -> range_char -> bool |>

(* TODO: look at LC_ environment variables, decide what to do *)

(* need functions for various locale operations on, e.g., matching collating elements, equivalence classes, character classes, and ranges *)

let between lo c hi = lo <= c && c <= hi

let rec ambient_charclass c cls = 
  match cls with     (* TODO expose is_ functions from ctypes into ocaml, just use those *)
  | "alnum" -> ambient_charclass c "alpha" || ambient_charclass c "digit"
  | "alpha" -> ambient_charclass c "upper" || ambient_charclass c "lower"
  | "blank" -> elem c (toCharList " \t")
  | "cntrl" -> ord c < ord #' ' || ord c = 127 (* del *)
  | "digit" -> elem c (toCharList "0123456789")
  | "graph" -> ambient_charclass c "alnum" || ambient_charclass c "punct"
  | "lower" -> between (ord #'a') (ord c) (ord #'z')
  | "print" -> ambient_charclass c "graph" || c = #' '
  | "punct" -> elem c (toCharList "!\"#$%&'()*+,-./:;<=>?@[\\]^_{}~|") || ord c = 200 (* grave accent *)
  | "space" -> elem c (toCharList " \t\n\r") || ord c = 11 (* VT *) || ord c = 14 (* FF *)
  | "upper" -> between (ord #'A') (ord c) (ord #'Z')
  | "xdigit" -> elem c (toCharList "0123456789ABCDEFabcdef")
  | _ -> false
  end 

let lc_ambient = 
  let collates c cls = elem c (toCharList cls) in (* TODO strcoll-ish *)
  let equiv c cls = elem c (toCharList cls) in (* derp derp *)
  let rchar (rc:range_char) : maybe char =
    match rc with
    | RChar c -> Just c
    | RCollating s -> 
       match toCharList s with
       | [c] -> Just c
       | _ -> Nothing
       end
    end in
  let range c rlo rhi = 
    match (rchar rlo, rchar rhi) with
    | (Just lo, Just hi) -> between (ord lo) (ord c) (ord hi)
    | _ -> false
    end in
  <| name = "ambient" ; collates = collates ; equiv = equiv ; charclass = ambient_charclass ; range = range |>

(**********************************************************************)
(* FILESYSTEMS ********************************************************)
(**********************************************************************)

(* Broadly, directories map to contents, which are dir trees or files.
 * For now, fine, just using for pathname expansion.
 *
 * TODO: Ultimately, rely on SibylFS's detailed model *)
type fs = <|
  parent: maybe fs;
  contents: Map.map string file
|>

and file = File | Dir of fs

val file_exists : fs -> string -> bool
let file_exists f name = 
  match Map.lookup name f.contents with
  | Nothing -> false
  | Just _ -> true
  end

val is_dir : fs -> string -> bool
let is_dir f name = 
  match Map.lookup name f.contents with
  | Just File -> false
  | Just (Dir _) -> true
  | Nothing -> false (* ??? *)
  end

val is_file : fs -> string -> bool
let is_file f name = 
  match Map.lookup name f.contents with
  | Just File -> true
  | Just (Dir _) -> false
  | Nothing -> false (* ??? *)
  end

val dotdot : fs -> fs
let dotdot fs =
  match fs.parent with
  | Nothing -> fs
  | Just fs' -> fs'
  end
   
(**********************************************************************)
(* Patterns ***********************************************************)
(**********************************************************************)

type substring_mode =
  Shortest
| Longest

type substring_side =
  Prefix
| Suffix  

(**********************************************************************)
(* Commands ***********************************************************)
(**********************************************************************)

type redir_type = To | Clobber | From | FromTo | Append
type dup_type = ToFD | FromFD
type heredoc_type = Here (* quoted heredoc name, for when the heredoc shouldn't do any expansion *) | XHere (* unquoted, do expansion *)

(**********************************************************************)
(* AST ****************************************************************)
(**********************************************************************)

type format =
    Normal
  | Default of words
  | NDefault of words
  | Assign of words
  | NAssign of words
  | Error of words
  | NError of words
  | Alt of words
  | NAlt of words
  | Length
  | Substring of substring_side * substring_mode * words
                                
(* Treating parameters niavely led to a problem when evaluating
 * ${x=${x=foo}bar${x=baz}} incorrectly when x was unset
 *)
and control =
    Tilde
  | TildeUser of string
  | Param of string * format
  | LAssign of string * expanded_words * words (* runtime technicality *)
  | LMatch of fields * substring_side * substring_mode * expanded_words * words (* runtime technicality *)
  | LError of string * expanded_words * words (* runtime technicality *)
  | Backtick of stmt
  | LBacktick of ty_shell_state * stmt (* original stmt *) * stmt (* in progress *)
  | Arith of expanded_words * words
  | Quote of words

and entry =
    S of string
  | K of control
  | F
  | ESym of symbolic (* embedded symbolic entries *)

and words = list entry

and stmt =
    Command of list (string * words) * words * list redir
  | CommandExpAssign of list (string * expansion_state) * words * list redir
  | CommandExpArgs of list (string * fields) * expansion_state * list redir
  | CommandExpanded of list (string * fields) * fields * list redir
  | Pipe of bool (* bg? *) * list stmt
  | Redir of stmt * list redir
  | Background of stmt * list redir
  | Subshell of stmt * list redir
  | And of stmt * stmt
  | Or of stmt * stmt
  | Not of stmt
  | Semi of stmt * stmt
  | If of stmt * stmt * stmt
  | While of stmt * stmt
  | WhileCond of stmt (* original cond *) * stmt (* current cond *) * stmt (* original body *)
  | WhileRunning of stmt (* original cond *) * stmt (* original body *) * stmt (* current body *)
  | For of string * words * stmt
  | ForExpArgs of string * expansion_state * stmt
  | ForExpanded of string * fields * stmt
  | ForRunning of string * fields * stmt (* original body *) * stmt (* current body *)
  | Case of words * list (words * stmt)
  | CaseExpArg of expansion_state * list (words * stmt)
  | CaseMatch of symbolic_string * list (words * stmt)
  | CaseCheckMatch of symbolic_string * expansion_state (* current pattern *) * stmt (* current command(s) *) * list (words * stmt) (* remaining cases *)
  | Defun of string * stmt
  | Call of nat (* outer loop_nest, to be restored *) * fields (* outer $1, $2, $3, etc *) * string (* function name *) * stmt (* orig body *) * stmt (* current body *)
  | Break of nat
  | Continue of nat
  | Return
  | Exit
  | Wait of nat (* pid *)
  | Done

and redir = 
   | RFile of redir_type * nat * words
   | RDup of dup_type * nat * nat
   | RHeredoc of heredoc_type * nat * words


(**********************************************************************)
(* Expansion **********************************************************)
(**********************************************************************)

and expanded_word =
   UsrF
 | ExpS of string
 | UsrS of string
 | DQuo of string
 | EWSym of symbolic

and expanded_words = list expanded_word

(* final expansion output *)
and symbolic =
    SymArith of fields (* symbolic result of arithmetic evaluation *) (* TODO is fields necessary? *)
  | SymCommand of stmt (* symbolic result of evaluating a command *)
  | SymPat of substring_side * substring_mode * symbolic_string * symbolic_string (* symbolic result of pattern matching (mode, pat, string) *)
and symbolic_char =
    C of char
  | Sym of symbolic
and symbolic_string = list symbolic_char

and fields = list (symbolic_string)

and tmp_field =
    WFS
  | FS
  | Field of symbolic_string
  | QField of symbolic_string

and intermediate_fields = list tmp_field

and expansion_state = 
    (* the constructor name indicates the *next* step to perform *)
    ExpStart of words
  | ExpExpand of expanded_words * words 
  | ExpSplit of expanded_words
  | ExpPath of intermediate_fields
  | ExpQuote of intermediate_fields
  | ExpError of fields
  | ExpDone of fields

and expansion_step =
    ESTilde of string
  | ESParam of string
  | ESCommand of string
  | ESArith of string
  | ESSplit of string
  | ESPath of string
  | ESQuote of string
  | ESStep of string
  | ESNested of expansion_step * expansion_step
  | ESEval of expansion_step * evaluation_step

and evaluation_step =
    XSSimple of string
  | XSPipe of string
  | XSRedir of string
  | XSBackground of string
  | XSSubshell of string
  | XSAnd of string
  | XSOr of string
  | XSNot of string
  | XSSemi of string
  | XSIf of string
  | XSWhile of string
  | XSFor of string
  | XSCase of string
  | XSDefun of string
  | XSStack of string (* function name *) * evaluation_step 
  | XSStep of string
  | XSNested of evaluation_step * evaluation_step
  | XSExpand of evaluation_step * expansion_step

(**********************************************************************)
(* SYMBOLIC SHELL/OS STATE ********************************************)
(**********************************************************************)

(* TODO 2018-02-09 longer term: type class abstracing over OS functions, allowing for ACTUAL OS state *)
              
(* FIFO pipes *)             
and fifo = string

(* File descriptors *)         
and fd = nat

and fds = Map.map fd nat (* index into global fifo list *)
       
(* environments *)       
and env = Map.map string symbolic_string

(* function definitions *)
and funcs = Map.map string stmt        

(* TODO 2018-02-25 need to track positional arguments separately *)
and ty_shell_state = <|
    script_name: string; (* $0 *)
    positional_params: list symbolic_string; (* $1, $2, $3, ... *)
    env: env;
    funcs: funcs;                 
    cwd: fs;
    locale: locale;
    loop_nest: nat; (* for tracking break/continue *)
    fds: fds
 |>

and proc =
    Execve of symbolic_string (* command *) * list symbolic_string (* args *) * env * fds
  | Shell of ty_shell_state
           
(* From t_fs_spec.lem_cppo line 1187 *)
and ty_os_state = <|
    passwd: Map.map string string; (* TODO relate to /etc/passwd, emulate getpwnam properly in getpwdir TODO 2018-02-09 move to actual filesystem *)
    sh: ty_shell_state;
    fs_root: fs;
    fifos: list fifo;
    procs: list proc
  |>

(**********************************************************************)
(* SYMBOLIC STRING FUNCTIONS ******************************************)
(**********************************************************************)

val null_sym : symbolic -> maybe bool
let null_sym sym =
  match sym with
  | SymArith _ -> Just false
  | SymCommand _ -> Nothing
  | SymPat _ _ _ _-> Nothing
  end

val null_char : symbolic_char -> maybe bool
let null_char c =
  match c with
  | C _ -> Just false
  | Sym sym -> null_sym sym
  end

val null_string : symbolic_string -> maybe bool
let rec null_string sym_str = 
  match sym_str with
  | [] -> Just true
  | c::cs ->
    let only_false mb =
      match mb with
      | Just true -> Nothing
      | Just false -> Just false
      | Nothing -> Nothing
      end
    in
    match null_char c with
    | Just true -> only_false (null_string cs)
    | Just false -> Just false
    | Nothing -> only_false (null_string cs)
    end
  end

val null_fields : fields -> maybe bool
let rec null_fields fs = 
  match fs with
  | [] -> Just true
  | f::fs -> 
     match (null_string f, null_fields fs) with
     | (Just true,  Just true)  -> Just true
     | (Just false, _)          -> Just false
     | (_,          Just false) -> Just false
     | (_,          _)          -> Nothing
     end
   end

val symbolic_string_of_fields : fields -> symbolic_string
let rec symbolic_string_of_fields fs = 
  match fs with
  | [] -> []
  | [f] -> f
  | f::fs' -> f ++ [C #' '] ++ symbolic_string_of_fields fs'
  end

val maximal_char_list : symbolic_string -> (list char * symbolic_string)
let rec maximal_char_list sym_str =
  match sym_str with
  | [] -> ([], [])
  | C c::rest ->
    let (cs, sym_str') = maximal_char_list rest in
    (c::cs, sym_str')
  | Sym _::_ -> ([], sym_str)
  end

val words_of_symbolic_string : symbolic_string -> words
let rec words_of_symbolic_string sym_str =
  match sym_str with
  | [] -> []
  | C _::_ ->
    let (cs, sym_str') = maximal_char_list sym_str in
    S (toString cs)::words_of_symbolic_string sym_str'
  | Sym sym::sym_str' -> ESym sym::words_of_symbolic_string sym_str'
  end

val words_of_fields : fields -> words
let words_of_fields fs = words_of_symbolic_string (symbolic_string_of_fields fs)

val expanded_words_of_symbolic_string : symbolic_string -> expanded_words
let rec expanded_words_of_symbolic_string sym_str =
  match sym_str with
  | [] -> []
  | C _::_ ->
    let (cs, sym_str') = maximal_char_list sym_str in
    ExpS (toString cs)::expanded_words_of_symbolic_string sym_str'
  | Sym sym::sym_str' -> EWSym sym::expanded_words_of_symbolic_string sym_str'
  end

val expanded_words_of_fields : fields -> expanded_words
let expanded_words_of_fields fs = expanded_words_of_symbolic_string (symbolic_string_of_fields fs)

val symbolic_string_of_char_list : list char -> symbolic_string
let symbolic_string_of_char_list cs = map C cs

val symbolic_string_of_string : string -> symbolic_string
let symbolic_string_of_string s = symbolic_string_of_char_list (toCharList s)

val fields_of_symbolic_string : symbolic_string -> fields
let fields_of_symbolic_string s = [s]

val try_concrete : symbolic_string -> maybe string
let rec try_concrete vs =
  match vs with
  | [] -> Just ""
  | C(c)::vs' -> 
     match try_concrete vs' with
     | Nothing -> Nothing
     | Just cs -> Just (toString [c] ^ cs)
     end
  | Sym _::_ -> Nothing
  end

val symbolic_to_string : symbolic -> string
let symbolic_to_string _sym = "<<SYMBOLIC>>"

val symbolic_char_to_string : symbolic_char -> string
let symbolic_char_to_string c =
  match c with
  | C c -> toString [c]
  | Sym sym -> symbolic_to_string sym
  end

val char_list_of_symbolic_string : symbolic_string -> list char
let rec char_list_of_symbolic_string sym_str =
  match sym_str with
  | [] -> []
  | (C c::cs) -> c::char_list_of_symbolic_string cs
  | (Sym sym)::cs -> toCharList (symbolic_to_string sym) ++ char_list_of_symbolic_string cs
  end
   
val string_of_symbolic_string : symbolic_string -> string
let rec string_of_symbolic_string sym_str =
  match sym_str with
  | [] -> ""
  | c::cs -> symbolic_char_to_string c ^ string_of_symbolic_string cs
  end

val fields_to_string : fields -> string
let rec fields_to_string fs = 
  match fs with
  | [] -> "f"
  | [f] -> string_of_symbolic_string f
  | f::fs' -> string_of_symbolic_string f ^ "<<FB>>" ^ fields_to_string fs'
  end

val concat_expanded : expanded_words -> symbolic_string
let rec concat_expanded w =
  match w with
  | [] -> symbolic_string_of_string ""
  | UsrF::ws -> symbolic_string_of_string " " ++ concat_expanded ws
  | ExpS s::ws -> symbolic_string_of_string s ++ concat_expanded ws
  | DQuo s::ws -> symbolic_string_of_string s ++ concat_expanded ws
  | EWSym sym::ws -> Sym sym::concat_expanded ws
  | UsrS _::_ -> symbolic_string_of_string "TODO: broken invariant"
  end

val fields_of_expanded_words : expanded_words -> fields
let fields_of_expanded_words w = [concat_expanded w]

(**********************************************************************)
(* SHELL/OS STATE FUNCTIONS *******************************************)
(**********************************************************************)

val STDIN : nat
val STDOUT : nat
val STDERR : nat
let STDIN = 0
let STDOUT = 1
let STDERR = 2
   
val print_shell_env : ty_os_state -> string
let print_shell_env st = Map_extra.fold (fun k v s -> k ^ " => " ^ string_of_symbolic_string v ^ ", " ^ s) st.sh.env ""

val lookup_positional_param : nat -> ty_os_state -> maybe symbolic_string
let lookup_positional_param num os =
  if num = 0
  then Just (symbolic_string_of_string os.sh.script_name)
  (* -1 for positional param offset (ie, $0 is stored elsewhere *)
  else index os.sh.positional_params (num - 1)

(* The result is nothing if the parameter is unset, and the empty string null. *)
val lookup_param : ty_os_state -> string -> maybe symbolic_string
let lookup_param s0 str =
  match (readNat (toCharList str),str) with
  | (Right num,_) -> lookup_positional_param num s0
  | (Left _,"@") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* positional arguments as fields *)
  | (Left _,"*") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* positional arguments as a string *)
  | (Left _,"#") -> Just (symbolic_string_of_string (stringFromNat (length s0.sh.positional_params))) (* number of positional arguments *)
  | (Left _,"!") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* last pid *)
  | (Left _,"-") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* current option flags *)
  | (Left _,"$") -> Just (symbolic_string_of_string "TODO 2018-03-02") (* shell pid *)
  | (Left _,_) -> Map.lookup str s0.sh.env
  end

val lookup_concrete_param : ty_os_state -> string -> maybe string
let lookup_concrete_param s0 str =
  match Map.lookup str s0.sh.env with
  | Nothing -> Nothing
  | Just fs -> try_concrete fs
  end

val set_param : string -> symbolic_string -> ty_os_state -> ty_os_state
let set_param x v os = <| os with sh = <| os.sh with env = Map.insert x v os.sh.env |> |>

val defun : string -> stmt -> ty_os_state -> ty_os_state
let defun name body os = <| os with sh = <| os.sh with funcs = Map.insert name body os.sh.funcs |> |>

val lookup_function : string -> ty_os_state -> maybe stmt
let lookup_function name os = Map.lookup name os.sh.funcs

val set_function_params : nat -> fields -> ty_os_state -> ty_os_state
let set_function_params ln argv os =
  <| os with sh =
    <| os.sh with
      loop_nest = ln;
      positional_params = argv
    |>
  |>

val get_script_name : ty_os_state -> string
let get_script_name os = os.sh.script_name

val get_positional_params : ty_os_state -> fields
let get_positional_params os = os.sh.positional_params

val enter_loop : ty_os_state -> ty_os_state
let enter_loop os = <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest + 1 |> |>

val exit_loop : ty_os_state -> ty_os_state
let exit_loop os = <| os with sh = <| os.sh with loop_nest = os.sh.loop_nest - 1 |> |>

val get_pwdir : ty_os_state -> string -> maybe string
let get_pwdir os u = Map.lookup u os.passwd

val set_pwdir : string -> string -> ty_os_state -> ty_os_state
let set_pwdir u d os = <| os with passwd = Map.insert u d (os.passwd) |>

val mkfifo : ty_os_state -> ty_os_state * nat
let mkfifo os =
  let fifo_num = length os.fifos in
  (<| os with fifos = os.fifos ++ [""] |>, fifo_num)

val mkfifos : ty_os_state -> nat -> ty_os_state * list nat 
let rec mkfifos os0 n =
  match n with
  | 0 -> (os0, [])
  | _ -> let (os1,fifo) = mkfifo os0 in 
         let (os2,fifos) = mkfifos os1 (n-1) in
         (os2,fifo::fifos)
  end

val adjust_nth : forall 'a 'b. list 'a -> nat -> ('a -> 'a * 'b) -> maybe (list 'a * 'b)
let rec adjust_nth l n f =
  match (l,n) with
  | ([],_) -> Nothing
  | (v::l',0) -> 
     let (v',res) = f v in
     Just (v'::l',res)
  | (v::l',_) ->
     match adjust_nth l' (n-1) f with
     | Nothing -> Nothing
     | Just (l'',res) -> Just (v::l'',res)
     end
  end
  
val write_fifo : ty_os_state -> nat -> string -> maybe ty_os_state
let write_fifo os fifo_num s =
  match adjust_nth os.fifos fifo_num (fun fifo_cts -> (fifo_cts ^ s, ())) with
  | Nothing -> Nothing
  | Just (new_fifos,()) -> Just <| os with fifos = new_fifos |>
  end

val read_fifo : ty_os_state -> nat -> maybe (ty_os_state * string)
let read_fifo os fifo_num =
  match adjust_nth os.fifos fifo_num (fun fifo_cts -> ("",fifo_cts)) with
  | Nothing -> Nothing
  | Just (new_fifos,s) -> Just (<| os with fifos = new_fifos |>, s)
  end

val print_stderr : ty_os_state -> string -> ty_os_state
let print_stderr os msg = 
  (* lookup where STDERR is pointing *)
  match Map.lookup STDERR os.sh.fds with
  | Just fifo_num -> 
     match write_fifo os fifo_num msg with
     (* TODO 2018-03-02 is this the right behavior when STDERR points to a bad fifo? *)
     | Nothing -> os
     | Just os -> os
     end
  (* TODO 2018-03-02 is this the right behavior when STDERR doesn't exist? *)
  | Nothing -> os
  end

val execve : ty_os_state -> symbolic_string -> list symbolic_string -> env -> fds -> ty_os_state * nat
let execve os prog argv env fds =
  (* TODO 2018-02-09 choose valid process numbers (e.g., 0 and 1 are reserved on Linux) *)
  let proc_num = length os.procs in
  (<| os with procs = os.procs ++ [Execve prog argv env fds] |>, proc_num)
                                    
(* Number type helpers *)

val integerToFields : integer -> fields
let integerToFields n = [symbolic_string_of_string (write n)]

val int32ToFields : int32 -> fields
let int32ToFields n = [symbolic_string_of_string (write n)]

val int64ToFields : int64 -> fields
let int64ToFields n = [symbolic_string_of_string (write n)]

(**********************************************************************)
(* DEFAULT SHELL OS STATE *********************************************)
(**********************************************************************)

(* empty FS/OS for testing purposes *)    
let fs_empty =
  <| parent = Nothing;
     contents = Map.empty
  |>

let env_default : env = Map.insert "?" (symbolic_string_of_string "0") Map.empty

(* INVARIANT: the second number here is referring to the indices in os_empty.fifos below *)
let fds_default : fds = Map.insert STDIN 0 (Map.insert STDOUT 1 (Map.insert STDERR 2 Map.empty))
    
let os_empty : ty_os_state = <|
    sh = <|
      script_name = "fsh"; (* $0 *)
      positional_params = []; (* $1, $2, $3 ... *)
      env = env_default;
      funcs = Map.empty;
      cwd = fs_empty;
      locale = lc_ambient;
      loop_nest = 0;
      fds = fds_default
  |>;
    passwd = Map.empty;
    fs_root = fs_empty;
    fifos = ["" (* STDIN *)
            ;"" (* STDOUT *)
            ;"" (* STDERR *)
            ];
    procs = []
 |>

