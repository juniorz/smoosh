open import Pervasives_extra

(*
Strings will be whatever lem uses for string
??? What character set does lem use for strings? Does it matter?
*)

(**********************************************************************)
(* Patterns ***********************************************************)
(**********************************************************************)

type substring_mode =
  Shortest
| Longest

type substring_side =
  Prefix
| Suffix  

(**********************************************************************)
(* Commands ***********************************************************)
(**********************************************************************)

type redir_type = To | Clobber | From | FromTo | Append
type dup_type = ToFD | FromFD
type heredoc_type = Here | XHere (* for when in a quote... not sure when this comes up *)

(**********************************************************************)
(* AST ****************************************************************)
(**********************************************************************)

type format =
    Normal
  | Default of words
  | NDefault of words
  | Assign of words
  | NAssign of words
  | Error of words
  | NError of words
  | Alt of words
  | NAlt of words
  | Length
  | Substring of substring_side * substring_mode * words
                                
(* Treating parameters niavely led to a problem when evaluating
 * ${x=${x=foo}bar${x=baz}} incorrectly when x was unset
 *)
and control =
    Tilde
  | TildeUser of string
  | Param of string * format
  | LAssign of string * expanded_words * words (* runtime technicality *)
  | LMatch of fields * substring_side * substring_mode * expanded_words * words (* runtime technicality *)
  | LError of string * expanded_words * words (* runtime technicality *)
  | Backtick of stmt
  | Arith of expanded_words * words
  | Quote of words

and entry =
    S of string
  | DQ of string (* why is this here? can't we just use Quote in control? *)
  | K of control
  | F
  | ESym of symbolic_string (* embedded symbolic entries *)

and words = list entry

and stmt = 
    Command of list (string * words) * words * list redir
  | Pipe of bool (* bg? *) * list stmt
  | Redir of stmt * list redir
  | Background of stmt * list redir
  | Subshell of stmt * list redir
  | And of stmt * stmt
  | Or of stmt * stmt
  | Not of stmt
  | Semi of stmt * stmt
  | If of stmt * stmt * stmt
  | While of stmt * stmt
  (*   | InWhile of stmt (* condition *) * stmt (* original body *) * stmt (* current body *) *)
  | For of string * words * stmt
  | Case of words * list (words * stmt)
  | Defun of string * stmt

and redir = 
   | File of redir_type * nat * words
   | Dup of dup_type * nat * nat
   | Heredoc of heredoc_type * nat * words


(**********************************************************************)
(* Expansion **********************************************************)
(**********************************************************************)

and expanded_word =
   UsrF
 | ExpS of string
 | UsrS of string
 | DQuo of string
 | EWSym of symbolic_string

and expanded_words = list expanded_word

(* final expansion output *)
and symbolic_char = 
    C of char
  | SymCommand of stmt (* symbolic result of evaluating a command *)
  | SymArith of fields (* symbolic result of arithmetic evaluation *) (* TODO is fields necessary? *)
  | SymPat of substring_mode * symbolic_string * symbolic_string (* symbolic result of pattern matching (mode, pat, string) *)

and symbolic_string = list symbolic_char

and fields = list (symbolic_string)

val null_string : symbolic_string -> maybe bool
let rec null_string f = 
  match f with
  | [] -> Just true
  | C(c)::_ -> Just false
  | SymArith _::_ -> Just false
  | SymCommand _::f -> 
     match null_string f with
     | Just false -> Just false
     | Just true -> Nothing
     | Nothing -> Nothing
     end
  | (SymPat _ _ _)::f ->
     match null_string f with
     | Just false -> Just false
     | Just true -> Nothing
     | Nothing -> Nothing
     end
  end

val null_fields : fields -> maybe bool
let rec null_fields fs = 
  match fs with
  | [] -> Just true
  | f::fs -> 
     match (null_string f, null_fields fs) with
     | (Just true,  Just true)  -> Just true
     | (Just false, _)          -> Just false
     | (_,          Just false) -> Just false
     | (_,          _)          -> Nothing
     end
   end

val toSymbolicCharList : fields -> symbolic_string
let rec toSymbolicCharList fs = 
  match fs with
  | [] -> []
  | [f] -> f
  | f::fs' -> f ++ [C #' '] ++ toSymbolicCharList fs
  end

val words_of_symbolic_string : symbolic_string -> words
let words_of_symbolic_string =
  map (function 
       | C c -> S (toString [c]) (* TODO find maximal runs of chars *)
       | sym -> ESym [sym]
       end)

val words_of_fields : fields -> words
let words_of_fields fs = 
  map (function 
       | C c -> S (toString [c]) (* TODO find maximal runs of chars *)
       | sym -> ESym [sym]
       end)
      (toSymbolicCharList fs)

val expanded_words_of_fields : fields -> expanded_words
let rec expanded_words_of_fields fs = 
  map (function 
       | C c -> ExpS (toString [c]) (* TODO find maximal runs of chars *)
       | sym -> EWSym [sym]
       end)
      (toSymbolicCharList fs)

val charListToSymbolicString : list char -> symbolic_string
let charListToSymbolicString cs = map C cs

val stringToSymbolicString : string -> symbolic_string
let stringToSymbolicString s = charListToSymbolicString (toCharList s)

(* TODO: this is toFields or symbolicStringToFields really *)
val toSymbolicString : symbolic_string -> fields
let toSymbolicString s = [s]

val try_concrete : symbolic_string -> maybe string
let rec try_concrete vs =
  match vs with
  | [] -> Just ""
  | C(c)::vs' -> 
     match try_concrete vs' with
     | Nothing -> Nothing
     | Just cs -> Just (toString [c] ^ cs)
     end
  | _ -> Nothing
  end

val symbolic_string_to_string_crappy : symbolic_string -> string
let rec symbolic_string_to_string_crappy f =
  match f with
  | [] -> "c"
  | C(c)::f' -> toString [c] ^ "<<CHAR>>" ^ symbolic_string_to_string_crappy f'
  | _::f' -> "<<SYMBOLIC>>" ^ symbolic_string_to_string_crappy f'
  end

val fields_to_string_crappy : fields -> string
let rec fields_to_string_crappy fs = 
  match fs with
  | [] -> "f"
  | [f] -> symbolic_string_to_string_crappy f
  | f::fs' -> symbolic_string_to_string_crappy f ^ "<<FB>>" ^ fields_to_string_crappy fs'
  end

(*-------------------------------*)
(* sibylfs types                 *)
(*-------------------------------*)

type ty_pid = Pid of nat (*o with sexp o*) (* coverage:sexp *)
let ty_pid_compare (Pid n0) (Pid n1) = compare n0 n1
instance ( SetType ty_pid )
  let setElemCompare = ty_pid_compare
end

instance (Eq ty_pid)
  let (=) = unsafe_structural_equality
  let (<>) = unsafe_structural_inequality
end

val dest_PID : ty_pid -> nat
let dest_PID x = (match x with Pid n -> n end) (* coverage:unused *)

(* From t_fs_spec.lem_cppo line 1187 *)
type ty_os_state = <|
    shell_env: Map.map string symbolic_string;
    passwd: Map.map string string (* TODO relate to /etc/passwd, emulate getpwnam properly in getpwdir *)
  |>

let os_empty : ty_os_state = <|
    shell_env = Map.empty;
    passwd = Map.empty
 |>
    
val print_shell_env : ty_os_state -> string
let print_shell_env st = Map_extra.fold (fun k v s -> k ^ " => " ^ symbolic_string_to_string_crappy v ^ ", " ^ s) st.shell_env ""

(* The result is nothing if the parameter is unset, and the empty string null. *)
val lookup_param : ty_os_state -> string -> maybe symbolic_string
let lookup_param s0 str = Map.lookup str s0.shell_env

val lookup_concrete_param : ty_os_state -> string -> maybe string
let lookup_concrete_param s0 str =
  match Map.lookup str s0.shell_env with
  | Nothing -> Nothing
  | Just fs -> try_concrete fs
  end

val set_param : string -> symbolic_string -> ty_os_state -> ty_os_state
let set_param x v os = <| os with shell_env = Map.insert x v (os.shell_env) |>

val get_pwdir : ty_os_state -> string -> maybe string
let get_pwdir os u = Map.lookup u os.passwd

val set_pwdir : string -> string -> ty_os_state -> ty_os_state
let set_pwdir u d os = <| os with passwd = Map.insert u d (os.passwd) |>

(*--------------------------------*)
(* Nat class                      *)
(*--------------------------------*)
class ( Nat 'a )
  val fromNat : nat -> 'a
  val toNat : 'a -> nat
end

instance (Nat integer)
  let fromNat = integerFromNat
  let toNat = natFromInteger
end

instance (Nat int32)
  let fromNat = int32FromNat
  let toNat = natFromInt32
end

instance (Nat int64)
  let fromNat = int64FromNat
  let toNat = natFromInt64
end

(*--------------------------------*)
(* Read class                     *)
(*--------------------------------*)

let is_whitespace c = elem c (toCharList " \n\t")
let is_digit c = elem c (toCharList "1234567890")
let is_num_const_char c = elem c (toCharList "1234567890xabcdefABCDEF")
let is_alpha c = elem c (toCharList "abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")

(* Convert uppercase A-F to lowercase and then convert
 * lowercase hexdigit to integer 10 to 15. *)
val hexalpha_to_num : char -> nat
let hexalpha_to_num c =
  let num = ord c in
  if 48 <= num && num <= 57
  then num - 48
  else let lowercase = if num >= 65 && num <= 70
                       then num + 32
                       else num in
       9 + (lowercase - 96)

class ( Read 'a )
  (* Read can fail with an error message by using Left.
   * Do not use any methods that may throw errors. *)
  val read : list char -> either string 'a
  val write : 'a -> string
end

let readConstant dec hex oct acc chars =
  match chars with
  | #'0'::#'x'::cs -> hex acc cs
  | #'0'::cs -> oct acc cs
  | _ -> dec acc chars
  end

let int64Max = ((int64FromNat 2) ** 63) - 1
let int64Min = ~((int64FromNat 2) ** 63)

let int32Max = ((int32FromNat 2) ** 31) - 1
let int32Min = ~((int32FromNat 2) ** 31)

val readInteger : nat -> integer -> (list char) -> either string integer
let rec readInteger base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else readInteger base (((integerFromNat base) * acc) + (integerFromNat num)) cs
  end

val readInt64 : nat -> int64 -> (list char) -> either string int64
let rec readInt64 base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else let acc1 = ((int64FromNat base) * acc) + (int64FromNat num) in
           if acc1 < 0
           then Right int64Max
           else readInt64 base acc1 cs
  end

val readInt32 : nat -> int32 -> (list char) -> either string int32
let rec readInt32 base acc chars =
  match chars with
  | [] -> Right acc
  | (c::cs) ->
     let num = hexalpha_to_num c in
      if num > base - 1 || num < 0
      then Left ((toString [c]) ^ " is not a valid base " ^ show base ^ " digit")
      else let acc1 = ((int32FromNat base) * acc) + (int32FromNat num) in
           if acc1 < 0
           then Right int32Max
           else readInt32 base acc1 cs
  end


val write_helper : forall 'a. Eq 'a, Nat 'a, NumIntegerDivision 'a, NumRemainder 'a => string -> 'a -> string
let rec write_helper str n =
  if n = fromNat 0
  then str
  else let ten = fromNat 10 in
    let next_digit = n mod ten in
    write_helper ((stringFromNat (toNat next_digit)) ^ str) (n div ten)

val unbounded_write : forall 'a. Eq 'a, Ord 'a, Nat 'a, NumNegate 'a, NumIntegerDivision 'a, NumRemainder 'a => 'a -> string
let unbounded_write n =
  if n < fromNat 0
  then "-" ^ (write_helper "" (~n))
  else 
    if n = fromNat 0
    then "0"
    else write_helper "" n

val write32 : int32 -> string
val write64 : int64 -> string
declare ocaml target_rep function write32 = `Int32.to_string`
declare ocaml target_rep function write64 = `Int64.to_string`

instance ( Read integer )
  let read cs = readConstant (readInteger 10) (readInteger 16) (readInteger 8) 0 cs
  let write = unbounded_write
end

instance ( Read int64 )
  let read cs = readConstant (readInt64 10) (readInt64 16) (readInt64 8) (int64FromNat 0) cs
  let write = write64
end

instance ( Read int32 )
  let read cs = readConstant (readInt32 10) (readInt32 16) (readInt32 8) (int32FromNat 0) cs
  let write = write32
end

val integerToFields : integer -> fields
let integerToFields n = [stringToSymbolicString (write n)]

val int32ToFields : int32 -> fields
let int32ToFields n = [stringToSymbolicString (write n)]

val int64ToFields : int64 -> fields
let int64ToFields n = [stringToSymbolicString (write n)]

